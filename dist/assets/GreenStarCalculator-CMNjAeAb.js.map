{"version":3,"file":"GreenStarCalculator-CMNjAeAb.js","sources":["../../src/components/calculator/calculators/GreenStarCalculator.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Star } from 'lucide-react';\r\nimport { EnhancedCalculatorResults } from '../enhanced';\r\nimport { ExtendedMaterialData } from '@/lib/materials/materialTypes';\r\nimport ComplianceFlag from '@/components/ui/compliance-flag';\r\nimport EmbodiedCarbonClassifier from '@/components/ui/embodied-carbon-classifier';\r\nimport MaterialComparisonToggle from '@/components/ui/material-comparison-toggle';\r\nimport ErrorBoundaryWrapper from '@/components/error/ErrorBoundaryWrapper';\r\n\r\ninterface GreenStarCalculatorProps {\r\n  onCalculationUpdate: (data: GreenStarData) => void;\r\n}\r\n\r\ninterface GreenStarData {\r\n  totalPoints: number;\r\n  starRating: number;\r\n  certificationLevel: string;\r\n  carbonPerformance: number;\r\n  percentage: number;\r\n  categoryBreakdown: Record<string, number>;\r\n  materialEmissions?: number;\r\n  transportEmissions?: number;\r\n  energyEmissions?: number;\r\n}\r\n\r\nexport const GreenStarCalculator: React.FC<GreenStarCalculatorProps> = ({ onCalculationUpdate }) => {\r\n  const [inputs, setInputs] = useState({\r\n    management: 0,\r\n    ieq: 0,        // Indoor Environment Quality\r\n    energy: 0,\r\n    transport: 0,\r\n    water: 0,\r\n    materials: 0,\r\n    land: 0,\r\n    emissions: 0\r\n  });\r\n\r\n  const [results, setResults] = useState<GreenStarData | null>(null);\r\n  const [selectedMaterials, setSelectedMaterials] = useState<ExtendedMaterialData[]>([]);\r\n  const [comparisonEnabled, setComparisonEnabled] = useState(false);\r\n\r\n  const categoryDetails = {\r\n    management: { name: 'Management', maxPoints: 12, description: 'Project management and commissioning' },\r\n    ieq: { name: 'Indoor Environment Quality', maxPoints: 17, description: 'Indoor air quality, lighting, and comfort' },\r\n    energy: { name: 'Energy', maxPoints: 25, description: 'Energy efficiency and renewable energy' },\r\n    transport: { name: 'Transport', maxPoints: 8, description: 'Public transport and sustainable transport' },\r\n    water: { name: 'Water', maxPoints: 12, description: 'Water efficiency and management' },\r\n    materials: { name: 'Materials', maxPoints: 15, description: 'Sustainable and recycled materials' },\r\n    land: { name: 'Land Use & Ecology', maxPoints: 6, description: 'Biodiversity and ecological value' },\r\n    emissions: { name: 'Emissions', maxPoints: 5, description: 'Greenhouse gas emissions reduction' }\r\n  };\r\n\r\n  const calculateGreenStar = () => {\r\n    const { management, ieq, energy, transport, water, materials, land, emissions } = inputs;\r\n\r\n    const totalPoints = management + ieq + energy + transport + water + materials + land + emissions;\r\n    const maxPoints = 100; // Total possible points\r\n    const percentage = (totalPoints / maxPoints) * 100;\r\n\r\n    // Determine star rating\r\n    let starRating = 0;\r\n    let certificationLevel = 'Not Certified';\r\n\r\n    if (percentage >= 75) {\r\n      starRating = 6;\r\n      certificationLevel = '6 Star Green Star';\r\n    } else if (percentage >= 60) {\r\n      starRating = 5;\r\n      certificationLevel = '5 Star Green Star';\r\n    } else if (percentage >= 45) {\r\n      starRating = 4;\r\n      certificationLevel = '4 Star Green Star';\r\n    } else if (percentage >= 30) {\r\n      starRating = 3;\r\n      certificationLevel = '3 Star Green Star';\r\n    } else if (percentage >= 15) {\r\n      starRating = 2;\r\n      certificationLevel = '2 Star Green Star';\r\n    } else if (percentage >= 10) {\r\n      starRating = 1;\r\n      certificationLevel = '1 Star Green Star';\r\n    }\r\n\r\n    const carbonPerformance = energy + emissions; // Carbon-related points\r\n\r\n    // Category breakdown\r\n    const categoryBreakdown: Record<string, number> = {\r\n      'Management': management,\r\n      'Indoor Environment Quality': ieq,\r\n      'Energy': energy,\r\n      'Transport': transport,\r\n      'Water': water,\r\n      'Materials': materials,\r\n      'Land Use & Ecology': land,\r\n      'Emissions': emissions\r\n    };\r\n\r\n    const calculationResults: GreenStarData = {\r\n      totalPoints,\r\n      starRating,\r\n      certificationLevel,\r\n      carbonPerformance,\r\n      percentage,\r\n      categoryBreakdown,\r\n      materialEmissions: materials * 50, // 15 points max * factor\r\n      transportEmissions: transport * 30, // 8 points max * factor\r\n      energyEmissions: energy * 25 // 25 points max\r\n    };\r\n\r\n    setResults(calculationResults);\r\n    onCalculationUpdate(calculationResults);\r\n  };\r\n\r\n  const handleInputChange = (field: keyof typeof inputs, value: string) => {\r\n    const numValue = parseFloat(value) || 0;\r\n    const maxValue = categoryDetails[field].maxPoints;\r\n    \r\n    setInputs(prev => ({\r\n      ...prev,\r\n      [field]: Math.min(numValue, maxValue) // Cap at maximum points for category\r\n    }));\r\n  };\r\n\r\n  const getStarColor = (rating: number) => {\r\n    if (rating >= 5) return 'text-green-600';\r\n    if (rating >= 4) return 'text-blue-600';\r\n    if (rating >= 3) return 'text-warning';\r\n    if (rating >= 2) return 'text-orange-600';\r\n    if (rating >= 1) return 'text-red-600';\r\n    return 'text-gray-400';\r\n  };\r\n\r\n  const renderStars = (rating: number) => {\r\n    return (\r\n      <div className=\"flex items-center\">\r\n        {[...Array(6)].map((_, i) => (\r\n          <Star\r\n            key={i}\r\n            className={`h-5 w-5 ${\r\n              i < rating\r\n                ? `fill-current ${getStarColor(rating)}`\r\n                : 'text-gray-300'\r\n            }`}\r\n          />\r\n        ))}\r\n        <span className=\"ml-2 text-sm font-medium\">{rating} star{rating !== 1 ? 's' : ''}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ErrorBoundaryWrapper feature=\"Green Star Calculator\">\r\n      <div className=\"space-y-6\">\r\n        <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Star className=\"h-5 w-5\" />\r\n            Green Building Council of Australia (GBCA) Green Star\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {Object.entries(categoryDetails).map(([key, details]) => (\r\n              <div key={key} className=\"space-y-2\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <Label htmlFor={`greenstar-${key}`} className=\"text-sm font-medium\">\r\n                    {details.name}\r\n                  </Label>\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    Max: {details.maxPoints} points\r\n                  </span>\r\n                </div>\r\n                <Input\r\n                  id={`greenstar-${key}`}\r\n                  type=\"number\"\r\n                  value={inputs[key as keyof typeof inputs] || ''}\r\n                  onChange={(e) => handleInputChange(key as keyof typeof inputs, e.target.value)}\r\n                  placeholder={`Enter points (0-${details.maxPoints})`}\r\n                  min=\"0\"\r\n                  max={details.maxPoints}\r\n                />\r\n                <p className=\"text-xs text-muted-foreground\">{details.description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <Button onClick={calculateGreenStar} className=\"w-full\">\r\n            Calculate Green Star Rating\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {results && (\r\n        <div className=\"space-y-6\">\r\n          {/* Green Star Results with Enhanced Display */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                Green Star Results\r\n                <div className=\"flex items-center gap-2\">\r\n                  <ComplianceFlag \r\n                    standard=\"greenstar\" \r\n                    status={results.starRating >= 5 ? 'compliant' : results.starRating >= 4 ? 'warning' : 'breach'}\r\n                  />\r\n                  <EmbodiedCarbonClassifier \r\n                    carbonIntensity={results.carbonPerformance}\r\n                    size=\"sm\"\r\n                  />\r\n                </div>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground\">Total Points</div>\r\n                  <div className=\"text-2xl font-bold text-primary\">\r\n                    {results.totalPoints}/100\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground\">{results.percentage.toFixed(1)}%</div>\r\n                </Card>\r\n\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground mb-2\">Star Rating</div>\r\n                  {renderStars(results.starRating)}\r\n                </Card>\r\n\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground\">Certification Level</div>\r\n                  <div className={`text-lg font-bold ${getStarColor(results.starRating)}`}>\r\n                    {results.certificationLevel}\r\n                  </div>\r\n                </Card>\r\n\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground\">Carbon Performance</div>\r\n                  <div className=\"text-2xl font-bold text-green-600\">\r\n                    {results.carbonPerformance}/30\r\n                  </div>\r\n                  <div className=\"text-xs text-green-600\">Energy + Emissions points</div>\r\n                </Card>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Green Star Material Comparison */}\r\n          <MaterialComparisonToggle\r\n            baseMaterial={{\r\n              name: 'Green Star Materials Selection',\r\n              carbon_footprint_kgco2e_kg: results.carbonPerformance / 5\r\n            }}\r\n            alternatives={[]}\r\n            onToggleComparison={setComparisonEnabled}\r\n            comparisonEnabled={comparisonEnabled}\r\n            onSelectAlternative={(material) => {\r\n              console.log('Selected Green Star material alternative:', material);\r\n            }}\r\n          />\r\n\r\n          {/* Enhanced Calculator Results */}\r\n          <EnhancedCalculatorResults\r\n            result={{\r\n              totalEmissions: results.carbonPerformance * 1000, // Convert to kg for display\r\n              materialEmissions: results.materialEmissions || 0,\r\n              transportEmissions: results.transportEmissions || 0,\r\n              energyEmissions: results.energyEmissions || 0,\r\n              breakdown: {\r\n                materials: results.materialEmissions || 0,\r\n                transport: results.transportEmissions || 0,\r\n                energy: results.energyEmissions || 0,\r\n              },\r\n              breakdownByMaterial: {},\r\n              breakdownByTransport: {},\r\n              breakdownByEnergy: { renewable: results.energyEmissions || 0 }\r\n            }}\r\n            materials={selectedMaterials}\r\n            onMaterialSelect={(material) => {\r\n              console.log('Selected Green Star material for optimization:', material);\r\n            }}\r\n          />\r\n\r\n          <Card className=\"p-4\">\r\n            <h4 className=\"font-semibold mb-4\">Category Performance</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {Object.entries(results.categoryBreakdown).map(([category, points]) => {\r\n                const categoryKey = Object.keys(categoryDetails).find(key => \r\n                  categoryDetails[key as keyof typeof categoryDetails].name === category\r\n                ) as keyof typeof categoryDetails;\r\n                const maxPoints = categoryKey ? categoryDetails[categoryKey].maxPoints : 1;\r\n                const percentage = (points / maxPoints) * 100;\r\n                \r\n                return (\r\n                  <div key={category} className=\"space-y-2\">\r\n                    <div className=\"flex justify-between items-center\">\r\n                      <span className=\"text-sm font-medium\">{category}</span>\r\n                      <span className=\"text-sm font-bold text-primary\">{points}/{maxPoints}</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\r\n                      <div \r\n                        className=\"bg-primary h-2 rounded-full transition-all duration-300\"\r\n                        style={{ width: `${percentage}%` }}\r\n                      />\r\n                    </div>\r\n                    <div className=\"text-xs text-muted-foreground\">\r\n                      {percentage.toFixed(0)}% of category maximum\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </Card>\r\n\r\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\r\n            <h4 className=\"font-semibold mb-2\">Green Star Rating System</h4>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\r\n              <div>\r\n                <h5 className=\"font-medium mb-2\">Star Rating Thresholds:</h5>\r\n                <div className=\"space-y-1 text-muted-foreground\">\r\n                  <div className=\"flex justify-between\">\r\n                    <span>6 Star - World Leadership:</span>\r\n                    <span className=\"font-medium\">75%+</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>5 Star - Australian Excellence:</span>\r\n                    <span className=\"font-medium\">60-74%</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>4 Star - Best Practice:</span>\r\n                    <span className=\"font-medium\">45-59%</span>\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <span>1-3 Star - Good Practice:</span>\r\n                    <span className=\"font-medium\">10-44%</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <h5 className=\"font-medium mb-2\">High Impact Categories:</h5>\r\n                <ul className=\"text-muted-foreground space-y-1 text-xs\">\r\n                  <li>• Energy (25 points) - largest impact category</li>\r\n                  <li>• Indoor Environment Quality (17 points)</li>\r\n                  <li>• Materials (15 points) - sustainable sourcing</li>\r\n                  <li>• Water (12 points) - efficiency and conservation</li>\r\n                  <li>• Management (12 points) - project delivery</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      </div>\r\n    </ErrorBoundaryWrapper>\r\n  );\r\n};"],"names":["GreenStarCalculator","onCalculationUpdate","inputs","setInputs","useState","results","setResults","selectedMaterials","setSelectedMaterials","comparisonEnabled","setComparisonEnabled","categoryDetails","calculateGreenStar","management","ieq","energy","transport","water","materials","land","emissions","totalPoints","percentage","starRating","certificationLevel","carbonPerformance","calculationResults","handleInputChange","field","value","numValue","maxValue","prev","getStarColor","rating","renderStars","jsxs","_","i","jsx","Star","ErrorBoundaryWrapper","Card","CardHeader","CardTitle","CardContent","key","details","Label","Input","e","Button","ComplianceFlag","EmbodiedCarbonClassifier","MaterialComparisonToggle","material","EnhancedCalculatorResults","category","points","categoryKey","maxPoints"],"mappings":"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"}