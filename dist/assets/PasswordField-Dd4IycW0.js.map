{"version":3,"file":"PasswordField-Dd4IycW0.js","sources":["../../src/lib/validations/auth.ts","../../src/components/auth/AuthFormError.tsx","../../src/components/auth/form-fields/EmailField.tsx","../../src/components/auth/form-fields/PasswordField.tsx"],"sourcesContent":["\r\nimport * as z from \"zod\";\r\n\r\n// Enhanced password schema with stronger security requirements\r\nconst passwordSchema = z\r\n  .string()\r\n  .min(12, \"Password must be at least 12 characters\")\r\n  .refine(\r\n    (password) => /[A-Z]/.test(password),\r\n    \"Password must contain at least one uppercase letter\"\r\n  )\r\n  .refine(\r\n    (password) => /[a-z]/.test(password),\r\n    \"Password must contain at least one lowercase letter\"\r\n  )\r\n  .refine(\r\n    (password) => /[0-9]/.test(password),\r\n    \"Password must contain at least one number\"\r\n  )\r\n  .refine(\r\n    (password) => /[^A-Za-z0-9]/.test(password),\r\n    \"Password must contain at least one special character\"\r\n  )\r\n  .refine(\r\n    (password) => !/(.)\\1{2,}/.test(password),\r\n    \"Password must not contain more than 2 consecutive identical characters\"\r\n  )\r\n  .refine(\r\n    (password) => !/password|qwerty|admin|welcome|abc123|111111|123123/i.test(password),\r\n    \"Password contains common patterns and is too predictable\"\r\n  )\r\n  .refine(\r\n    (password) => !/qwertyuiop|asdfghjkl|zxcvbnm|1234567890/.test(password.toLowerCase()),\r\n    \"Password contains keyboard patterns\"\r\n  );\r\n\r\n// Enhanced email validation\r\nconst emailSchema = z\r\n  .string()\r\n  .email(\"Please enter a valid email address\")\r\n  .min(5, \"Email is too short\")\r\n  .max(254, \"Email is too long\")\r\n  .refine(\r\n    (email) => !email.includes('..'),\r\n    \"Email cannot contain consecutive dots\"\r\n  )\r\n  .refine(\r\n    (email) => !/[<>\"/\\\\]/.test(email),\r\n    \"Email contains invalid characters\"\r\n  );\r\n\r\n// Enhanced name validation\r\nconst nameSchema = z\r\n  .string()\r\n  .min(2, \"Name must be at least 2 characters\")\r\n  .max(100, \"Name must not exceed 100 characters\")\r\n  .refine(\r\n    (name) => !/[<>\"/\\\\]/.test(name),\r\n    \"Name contains invalid characters\"\r\n  )\r\n  .refine(\r\n    (name) => name.trim().length > 0,\r\n    \"Name cannot be empty or only whitespace\"\r\n  );\r\n\r\nexport const loginSchema = z.object({\r\n  email: emailSchema,\r\n  password: z.string().min(1, \"Password is required\"),\r\n});\r\n\r\nexport const registerSchema = z.object({\r\n  full_name: nameSchema,\r\n  email: emailSchema,\r\n  password: passwordSchema,\r\n});\r\n\r\nexport type LoginFormValues = z.infer<typeof loginSchema>;\r\nexport type RegisterFormValues = z.infer<typeof registerSchema>;\r\n","\r\ninterface AuthFormErrorProps {\r\n  error: string | null;\r\n}\r\n\r\nconst AuthFormError = ({ error }: AuthFormErrorProps) => {\r\n  if (!error) return null;\r\n  \r\n  return (\r\n    <div className=\"bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\r\n      {error}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthFormError;\r\n","\r\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { UseFormReturn } from \"react-hook-form\";\r\n\r\ninterface EmailFieldProps {\r\n  form: UseFormReturn<any>;\r\n}\r\n\r\nconst EmailField = ({ form }: EmailFieldProps) => {\r\n  return (\r\n    <FormField\r\n      control={form.control}\r\n      name=\"email\"\r\n      render={({ field }) => (\r\n        <FormItem>\r\n          <FormLabel>Email</FormLabel>\r\n          <FormControl>\r\n            <Input \r\n              placeholder=\"you@example.com\" \r\n              autoComplete=\"email\" \r\n              type=\"email\"\r\n              aria-label=\"Email address\"\r\n              {...field} \r\n            />\r\n          </FormControl>\r\n          <FormMessage />\r\n        </FormItem>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EmailField;\r\n","\r\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { UseFormReturn } from \"react-hook-form\";\r\n\r\ninterface PasswordFieldProps {\r\n  form: UseFormReturn<any>;\r\n  name?: string;\r\n  label?: string;\r\n}\r\n\r\nconst PasswordField = ({ form, name = \"password\", label = \"Password\" }: PasswordFieldProps) => {\r\n  return (\r\n    <FormField\r\n      control={form.control}\r\n      name={name}\r\n      render={({ field }) => (\r\n        <FormItem>\r\n          <FormLabel>{label}</FormLabel>\r\n          <FormControl>\r\n            <Input \r\n              type=\"password\" \r\n              placeholder=\"••••••\" \r\n              autoComplete={name === \"password\" ? \"current-password\" : \"new-password\"}\r\n              {...field} \r\n            />\r\n          </FormControl>\r\n          <FormMessage />\r\n        </FormItem>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PasswordField;\r\n"],"names":["passwordSchema","z.string","password","emailSchema","email","nameSchema","name","loginSchema","z.object","registerSchema","AuthFormError","error","jsx","EmailField","form","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","PasswordField","label"],"mappings":"4JAIA,MAAMA,EAAiBC,EACpB,EACA,IAAI,GAAI,yCAAyC,EACjD,OACEC,GAAa,QAAQ,KAAKA,CAAQ,EACnC,qDACF,EACC,OACEA,GAAa,QAAQ,KAAKA,CAAQ,EACnC,qDACF,EACC,OACEA,GAAa,QAAQ,KAAKA,CAAQ,EACnC,2CACF,EACC,OACEA,GAAa,eAAe,KAAKA,CAAQ,EAC1C,sDACF,EACC,OACEA,GAAa,CAAC,YAAY,KAAKA,CAAQ,EACxC,wEACF,EACC,OACEA,GAAa,CAAC,sDAAsD,KAAKA,CAAQ,EAClF,0DACF,EACC,OACEA,GAAa,CAAC,0CAA0C,KAAKA,EAAS,aAAa,EACpF,qCACF,EAGIC,EAAcF,EACjB,EACA,MAAM,oCAAoC,EAC1C,IAAI,EAAG,oBAAoB,EAC3B,IAAI,IAAK,mBAAmB,EAC5B,OACEG,GAAU,CAACA,EAAM,SAAS,IAAI,EAC/B,uCACF,EACC,OACEA,GAAU,CAAC,WAAW,KAAKA,CAAK,EACjC,mCACF,EAGIC,EAAaJ,IAEhB,IAAI,EAAG,oCAAoC,EAC3C,IAAI,IAAK,qCAAqC,EAC9C,OACEK,GAAS,CAAC,WAAW,KAAKA,CAAI,EAC/B,kCACF,EACC,OACEA,GAASA,EAAK,KAAA,EAAO,OAAS,EAC/B,yCACF,EAEWC,EAAcC,EAAS,CAClC,MAAOL,EACP,SAAUF,EAAE,EAAS,IAAI,EAAG,sBAAsB,CACpD,CAAC,EAEYQ,EAAiBD,EAAS,CACrC,UAAWH,EACX,MAAOF,EACP,SAAUH,CACZ,CAAC,ECrEKU,EAAgB,CAAC,CAAE,MAAAC,KAClBA,EAGHC,EAAAA,IAAC,MAAA,CAAI,UAAU,sEACZ,SAAAD,EACH,EALiB,KCGfE,EAAa,CAAC,CAAE,KAAAC,KAElBF,EAAAA,IAACG,EAAA,CACC,QAASD,EAAK,QACd,KAAK,QACL,OAAQ,CAAC,CAAE,MAAAE,CAAA,WACRC,EAAA,CACC,SAAA,CAAAL,EAAAA,IAACM,GAAU,SAAA,OAAA,CAAK,QACfC,EAAA,CACC,SAAAP,EAAAA,IAACQ,EAAA,CACC,YAAY,kBACZ,aAAa,QACb,KAAK,QACL,aAAW,gBACV,GAAGJ,CAAA,CAAA,EAER,QACCK,EAAA,CAAA,CAAY,CAAA,CAAA,CACf,CAAA,CAAA,EChBFC,EAAgB,CAAC,CAAE,KAAAR,EAAM,KAAAR,EAAO,WAAY,MAAAiB,EAAQ,cAEtDX,EAAAA,IAACG,EAAA,CACC,QAASD,EAAK,QACd,KAAAR,EACA,OAAQ,CAAC,CAAE,MAAAU,CAAA,WACRC,EAAA,CACC,SAAA,CAAAL,EAAAA,IAACM,GAAW,SAAAK,CAAA,CAAM,QACjBJ,EAAA,CACC,SAAAP,EAAAA,IAACQ,EAAA,CACC,KAAK,WACL,YAAY,SACZ,aAAcd,IAAS,WAAa,mBAAqB,eACxD,GAAGU,CAAA,CAAA,EAER,QACCK,EAAA,CAAA,CAAY,CAAA,CAAA,CACf,CAAA,CAAA"}