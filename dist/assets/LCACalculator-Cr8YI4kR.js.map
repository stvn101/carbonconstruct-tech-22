{"version":3,"file":"LCACalculator-Cr8YI4kR.js","sources":["../../src/services/materialDatabaseService.ts","../../src/hooks/useDebounce.ts","../../src/components/calculator/materials/MaterialSelector.tsx","../../src/lib/enhancedCarbonCalculations.ts","../../src/components/calculator/calculators/LCACalculator.tsx"],"sourcesContent":["import { supabase } from '@/integrations/supabase/client';\r\nimport { ExtendedMaterialData } from '@/lib/materials/materialTypes';\r\n\r\nexport interface MaterialSearchFilters {\r\n  category?: string;\r\n  region?: string;\r\n  tags?: string[];\r\n  carbonIntensity?: 'low' | 'medium' | 'high';\r\n  recyclability?: 'High' | 'Medium' | 'Low';\r\n  greenStarCompliant?: boolean;\r\n  searchTerm?: string;\r\n}\r\n\r\nexport interface MaterialLookupResult {\r\n  material: ExtendedMaterialData;\r\n  carbonFactor: number;\r\n  confidence: number;\r\n  alternatives?: ExtendedMaterialData[];\r\n}\r\n\r\nclass MaterialDatabaseService {\r\n  private cache = new Map<string, MaterialLookupResult>();\r\n  private cacheExpiry = 5 * 60 * 1000; // 5 minutes\r\n\r\n  async searchMaterials(filters: MaterialSearchFilters, limit = 50): Promise<ExtendedMaterialData[]> {\r\n    try {\r\n      // Check authentication before making query\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.warn('Authentication required for material search');\r\n        return [];\r\n      }\r\n\r\n      let query = supabase.from('unified_materials').select('*');\r\n\r\n      // Apply filters\r\n      if (filters.category) {\r\n        query = query.eq('category', filters.category);\r\n      }\r\n      \r\n      if (filters.region) {\r\n        query = query.eq('region', filters.region);\r\n      }\r\n\r\n      if (filters.carbonIntensity) {\r\n        query = query.eq('carbon_intensity_category', filters.carbonIntensity);\r\n      }\r\n\r\n      if (filters.recyclability) {\r\n        query = query.eq('recyclability', filters.recyclability);\r\n      }\r\n\r\n      if (filters.greenStarCompliant !== undefined) {\r\n        query = query.eq('green_star_compliant', filters.greenStarCompliant);\r\n      }\r\n\r\n      if (filters.searchTerm) {\r\n        query = query.or(`name.ilike.%${filters.searchTerm}%,description.ilike.%${filters.searchTerm}%`);\r\n      }\r\n\r\n      if (filters.tags && filters.tags.length > 0) {\r\n        query = query.overlaps('tags', filters.tags);\r\n      }\r\n\r\n      query = query.order('data_quality_rating', { ascending: false, nullsFirst: false });\r\n      query = query.limit(limit);\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) {\r\n        console.error('Error searching materials:', error);\r\n        return [];\r\n      }\r\n\r\n      return (data || []) as ExtendedMaterialData[];\r\n    } catch (error) {\r\n      console.error('Material search failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async lookupMaterial(materialName: string, fallbackFactor = 1.0): Promise<MaterialLookupResult> {\r\n    const cacheKey = `lookup_${materialName.toLowerCase()}`;\r\n    const cached = this.cache.get(cacheKey);\r\n    \r\n    if (cached && Date.now() - cached.confidence < this.cacheExpiry) {\r\n      return cached;\r\n    }\r\n\r\n    try {\r\n      // Use the database function for best material data\r\n      const { data, error } = await supabase.rpc('get_best_material_data', {\r\n        material_name: materialName\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Material lookup error:', error);\r\n        return this.createFallbackResult(materialName, fallbackFactor);\r\n      }\r\n\r\n      if (!data || data.length === 0) {\r\n        console.warn(`No material found for: ${materialName}`);\r\n        return this.createFallbackResult(materialName, fallbackFactor);\r\n      }\r\n\r\n      const materialData = data[0];\r\n      const carbonFactor = materialData.carbon_footprint_kgco2e_kg || fallbackFactor;\r\n      \r\n      // Get alternatives\r\n      const alternatives = await this.findAlternatives(materialName, materialData.id);\r\n\r\n      const result: MaterialLookupResult = {\r\n        material: materialData,\r\n        carbonFactor,\r\n        confidence: this.calculateConfidence(materialData),\r\n        alternatives\r\n      };\r\n\r\n      // Cache the result\r\n      this.cache.set(cacheKey, result);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error('Material database lookup failed:', error);\r\n      return this.createFallbackResult(materialName, fallbackFactor);\r\n    }\r\n  }\r\n\r\n  async findAlternatives(materialType: string, excludeId?: string): Promise<ExtendedMaterialData[]> {\r\n    try {\r\n      // Check authentication before making query\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.warn('Authentication required for finding alternatives');\r\n        return [];\r\n      }\r\n\r\n      let query = supabase\r\n        .from('unified_materials')\r\n        .select('*')\r\n        .or(`alternative_to.eq.${materialType},material_type.eq.${materialType}`)\r\n        .order('sustainability_score', { ascending: false, nullsFirst: false })\r\n        .limit(5);\r\n\r\n      if (excludeId) {\r\n        query = query.neq('id', excludeId);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) {\r\n        console.error('Error finding alternatives:', error);\r\n        return [];\r\n      }\r\n\r\n      return (data || []) as ExtendedMaterialData[];\r\n    } catch (error) {\r\n      console.error('Alternative lookup failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getMaterialsByCategory(category: string): Promise<ExtendedMaterialData[]> {\r\n    try {\r\n      // Check authentication before making query\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.warn('Authentication required for materials by category');\r\n        return [];\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('unified_materials')\r\n        .select('*')\r\n        .eq('category', category)\r\n        .order('name')\r\n        .limit(100);\r\n\r\n      if (error) {\r\n        console.error('Error getting materials by category:', error);\r\n        return [];\r\n      }\r\n\r\n      return (data || []) as ExtendedMaterialData[];\r\n    } catch (error) {\r\n      console.error('Category lookup failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getPopularMaterials(limit = 20): Promise<ExtendedMaterialData[]> {\r\n    try {\r\n      // Check authentication before making query\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) {\r\n        console.warn('Authentication required for popular materials');\r\n        return [];\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from('unified_materials')\r\n        .select('*')\r\n        .order('data_quality_rating', { ascending: false, nullsFirst: false })\r\n        .order('sustainability_score', { ascending: false, nullsFirst: false })\r\n        .limit(limit);\r\n\r\n      if (error) {\r\n        console.error('Error getting popular materials:', error);\r\n        return [];\r\n      }\r\n\r\n      return (data || []) as ExtendedMaterialData[];\r\n    } catch (error) {\r\n      console.error('Popular materials lookup failed:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private createFallbackResult(materialName: string, fallbackFactor: number): MaterialLookupResult {\r\n    return {\r\n      material: {\r\n        id: `fallback-${Date.now()}`,\r\n        name: materialName,\r\n        carbon_footprint_kgco2e_kg: fallbackFactor,\r\n        unit: 'kg',\r\n        source: 'fallback',\r\n        verification_status: 'unverified' as const,\r\n        data_quality_rating: 1\r\n      },\r\n      carbonFactor: fallbackFactor,\r\n      confidence: 10, // Low confidence for fallback\r\n      alternatives: []\r\n    };\r\n  }\r\n\r\n  private calculateConfidence(material: ExtendedMaterialData): number {\r\n    let confidence = 50; // Base confidence\r\n\r\n    // Increase confidence based on verification status\r\n    if (material.verification_status === 'verified') confidence += 30;\r\n    else if (material.verification_status === 'peer_reviewed') confidence += 20;\r\n\r\n    // Increase confidence based on data quality rating\r\n    if (material.data_quality_rating) {\r\n      confidence += material.data_quality_rating * 2;\r\n    }\r\n\r\n    // Increase confidence if EPD data exists\r\n    if (material.epd_registration_number) confidence += 15;\r\n\r\n    // Cap at 95%\r\n    return Math.min(confidence, 95);\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n\r\nexport const materialDatabaseService = new MaterialDatabaseService();","\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Custom hook for debouncing values with optimized performance\r\n * @param value The value to debounce\r\n * @param delay The delay in milliseconds (default: 300ms)\r\n * @returns The debounced value\r\n */\r\nexport function useDebounce<T>(value: T, delay = 300): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n  const timerRef = useRef<number | null>(null);\r\n  \r\n  useEffect(() => {\r\n    // Clear previous timer\r\n    if (timerRef.current) {\r\n      clearTimeout(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n    \r\n    // Skip debounce for initial value or when delay is 0\r\n    if (delay === 0) {\r\n      setDebouncedValue(value);\r\n      return;\r\n    }\r\n    \r\n    // Update debounced value after delay\r\n    timerRef.current = window.setTimeout(() => {\r\n      setDebouncedValue(value);\r\n      timerRef.current = null;\r\n    }, delay);\r\n\r\n    // Cleanup function to prevent memory leaks\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearTimeout(timerRef.current);\r\n        timerRef.current = null;\r\n      }\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n/**\r\n * Hook for throttling values - useful for high-frequency events\r\n * @param value The value to throttle\r\n * @param limit The time limit in milliseconds (default: 200ms)\r\n * @returns The throttled value\r\n */\r\nexport function useThrottle<T>(value: T, limit = 200): T {\r\n  const [throttledValue, setThrottledValue] = useState<T>(value);\r\n  const lastRan = useRef(Date.now());\r\n\r\n  useEffect(() => {\r\n    const handler = window.setTimeout(() => {\r\n      if (Date.now() - lastRan.current >= limit) {\r\n        setThrottledValue(value);\r\n        lastRan.current = Date.now();\r\n      }\r\n    }, limit - (Date.now() - lastRan.current));\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, limit]);\r\n\r\n  return throttledValue;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Search, Plus, Star, CheckCircle, AlertTriangle, Leaf } from 'lucide-react';\r\nimport { materialDatabaseService, MaterialSearchFilters } from '@/services/materialDatabaseService';\r\nimport { ExtendedMaterialData } from '@/lib/materials/materialTypes';\r\nimport { useDebounce } from '@/hooks/useDebounce';\r\n\r\ninterface MaterialSelectorProps {\r\n  selectedMaterials: SelectedMaterial[];\r\n  onMaterialChange: (materials: SelectedMaterial[]) => void;\r\n  category?: string;\r\n  placeholder?: string;\r\n}\r\n\r\nexport interface SelectedMaterial {\r\n  id: string;\r\n  material: ExtendedMaterialData;\r\n  quantity: number;\r\n  unit: string;\r\n  carbonFactor: number;\r\n  confidence: number;\r\n}\r\n\r\nexport const MaterialSelector: React.FC<MaterialSelectorProps> = ({\r\n  selectedMaterials,\r\n  onMaterialChange,\r\n  category,\r\n  placeholder = \"Search and select materials...\"\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchResults, setSearchResults] = useState<ExtendedMaterialData[]>([]);\r\n  const [popularMaterials, setPopularMaterials] = useState<ExtendedMaterialData[]>([]);\r\n  const [filters, setFilters] = useState<MaterialSearchFilters>({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  \r\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n  useEffect(() => {\r\n    loadPopularMaterials();\r\n  }, [category]);\r\n\r\n  useEffect(() => {\r\n    if (debouncedSearchTerm.trim()) {\r\n      searchMaterials();\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  }, [debouncedSearchTerm, filters]);\r\n\r\n  const loadPopularMaterials = async () => {\r\n    try {\r\n      const materials = category \r\n        ? await materialDatabaseService.getMaterialsByCategory(category)\r\n        : await materialDatabaseService.getPopularMaterials(20);\r\n      setPopularMaterials(materials);\r\n    } catch (error) {\r\n      console.error('Failed to load popular materials:', error);\r\n    }\r\n  };\r\n\r\n  const searchMaterials = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const materials = await materialDatabaseService.searchMaterials({\r\n        ...filters,\r\n        searchTerm: debouncedSearchTerm,\r\n        category: category || filters.category\r\n      });\r\n      setSearchResults(materials);\r\n    } catch (error) {\r\n      console.error('Material search failed:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const addMaterial = async (material: ExtendedMaterialData) => {\r\n    try {\r\n      const lookupResult = await materialDatabaseService.lookupMaterial(\r\n        material.name || '',\r\n        material.carbon_footprint_kgco2e_kg || 1.0\r\n      );\r\n\r\n      const newSelectedMaterial: SelectedMaterial = {\r\n        id: material.id || `temp-${Date.now()}`,\r\n        material: lookupResult.material,\r\n        quantity: 1,\r\n        unit: material.unit || 'kg',\r\n        carbonFactor: lookupResult.carbonFactor,\r\n        confidence: lookupResult.confidence\r\n      };\r\n\r\n      const updatedMaterials = [...selectedMaterials, newSelectedMaterial];\r\n      onMaterialChange(updatedMaterials);\r\n      setIsOpen(false);\r\n    } catch (error) {\r\n      console.error('Failed to add material:', error);\r\n    }\r\n  };\r\n\r\n  const updateMaterialQuantity = (materialId: string, quantity: number) => {\r\n    const updatedMaterials = selectedMaterials.map(m =>\r\n      m.id === materialId ? { ...m, quantity } : m\r\n    );\r\n    onMaterialChange(updatedMaterials);\r\n  };\r\n\r\n  const removeMaterial = (materialId: string) => {\r\n    const updatedMaterials = selectedMaterials.filter(m => m.id !== materialId);\r\n    onMaterialChange(updatedMaterials);\r\n  };\r\n\r\n  const getConfidenceColor = (confidence: number) => {\r\n    if (confidence >= 80) return 'text-green-600';\r\n    if (confidence >= 60) return 'text-yellow-600';\r\n    return 'text-red-600';\r\n  };\r\n\r\n  const getConfidenceIcon = (confidence: number) => {\r\n    if (confidence >= 80) return <CheckCircle className=\"h-4 w-4\" />;\r\n    if (confidence >= 60) return <AlertTriangle className=\"h-4 w-4\" />;\r\n    return <AlertTriangle className=\"h-4 w-4\" />;\r\n  };\r\n\r\n  const displayMaterials = searchTerm.trim() ? searchResults : popularMaterials;\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Selected Materials */}\r\n      {selectedMaterials.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-sm\">Selected Materials</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-3\">\r\n            {selectedMaterials.map((selectedMaterial) => (\r\n              <div key={selectedMaterial.id} className=\"flex items-center gap-3 p-3 border rounded-lg\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span className=\"font-medium\">{selectedMaterial.material.name}</span>\r\n                    <Badge \r\n                      variant=\"outline\" \r\n                      className={getConfidenceColor(selectedMaterial.confidence)}\r\n                    >\r\n                      {getConfidenceIcon(selectedMaterial.confidence)}\r\n                      {selectedMaterial.confidence}%\r\n                    </Badge>\r\n                    {selectedMaterial.material.green_star_compliant && (\r\n                      <Badge variant=\"default\" className=\"text-green-600\">\r\n                        <Star className=\"h-3 w-3 mr-1\" />\r\n                        Green Star\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-sm text-muted-foreground\">\r\n                    {selectedMaterial.carbonFactor.toFixed(2)} kg CO₂-e/{selectedMaterial.unit}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-2\">\r\n                  <Input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    step=\"0.1\"\r\n                    value={selectedMaterial.quantity}\r\n                    onChange={(e) => updateMaterialQuantity(\r\n                      selectedMaterial.id, \r\n                      parseFloat(e.target.value) || 0\r\n                    )}\r\n                    className=\"w-20\"\r\n                  />\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    {selectedMaterial.unit}\r\n                  </span>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => removeMaterial(selectedMaterial.id)}\r\n                    className=\"text-destructive hover:text-destructive\"\r\n                  >\r\n                    ×\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Add Material Dialog */}\r\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\r\n        <DialogTrigger asChild>\r\n          <Button variant=\"outline\" className=\"w-full\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            {placeholder}\r\n          </Button>\r\n        </DialogTrigger>\r\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Select Materials from Database</DialogTitle>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"space-y-4\">\r\n            {/* Search and Filters */}\r\n            <div className=\"flex gap-3\">\r\n              <div className=\"flex-1 relative\">\r\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder=\"Search materials...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              \r\n              <Select\r\n                value={filters.recyclability || 'all'}\r\n                onValueChange={(value) => setFilters(prev => ({ \r\n                  ...prev, \r\n                  recyclability: value === 'all' ? undefined : value as 'High' | 'Medium' | 'Low'\r\n                }))}\r\n              >\r\n                <SelectTrigger className=\"w-40\">\r\n                  <SelectValue placeholder=\"Recyclability\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All</SelectItem>\r\n                  <SelectItem value=\"High\">High</SelectItem>\r\n                  <SelectItem value=\"Medium\">Medium</SelectItem>\r\n                  <SelectItem value=\"Low\">Low</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              \r\n              <Select\r\n                value={filters.carbonIntensity || 'all'}\r\n                onValueChange={(value) => setFilters(prev => ({ \r\n                  ...prev, \r\n                  carbonIntensity: value === 'all' ? undefined : value as 'low' | 'medium' | 'high'\r\n                }))}\r\n              >\r\n                <SelectTrigger className=\"w-40\">\r\n                  <SelectValue placeholder=\"Carbon Impact\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All</SelectItem>\r\n                  <SelectItem value=\"low\">Low Impact</SelectItem>\r\n                  <SelectItem value=\"medium\">Medium Impact</SelectItem>\r\n                  <SelectItem value=\"high\">High Impact</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            {/* Material Results */}\r\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n              {isLoading ? (\r\n                <div className=\"text-center py-8\">\r\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\r\n                  <p className=\"text-sm text-muted-foreground mt-2\">Searching materials...</p>\r\n                </div>\r\n              ) : displayMaterials.length > 0 ? (\r\n                displayMaterials.map((material) => (\r\n                  <div\r\n                    key={material.id}\r\n                    className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\"\r\n                    onClick={() => addMaterial(material)}\r\n                  >\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"font-medium\">{material.name}</span>\r\n                        {material.green_star_compliant && (\r\n                          <Badge variant=\"default\" className=\"text-green-600\">\r\n                            <Star className=\"h-3 w-3 mr-1\" />\r\n                            Green Star\r\n                          </Badge>\r\n                        )}\r\n                        {material.recyclability === 'High' && (\r\n                          <Badge variant=\"outline\" className=\"text-green-600\">\r\n                            <Leaf className=\"h-3 w-3 mr-1\" />\r\n                            Recyclable\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        {material.carbon_footprint_kgco2e_kg?.toFixed(2)} kg CO₂-e/{material.unit || 'kg'}\r\n                        {material.description && ` • ${material.description}`}\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2 mt-1\">\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {material.category}\r\n                        </Badge>\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          Quality: {material.data_quality_rating || 1}/10\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                    <Button size=\"sm\">\r\n                      <Plus className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"text-center py-8\">\r\n                  <p className=\"text-muted-foreground\">\r\n                    {searchTerm.trim() ? 'No materials found' : 'Start typing to search materials'}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};","import { materialDatabaseService } from '@/services/materialDatabaseService';\r\nimport { SelectedMaterial } from '@/components/calculator/materials/MaterialSelector';\r\nimport { MaterialInput, TransportInput, EnergyInput } from './carbonTypes';\r\n\r\nexport interface EnhancedCalculationInput {\r\n  materials: SelectedMaterial[];\r\n  transport: TransportInput[];\r\n  energy: EnergyInput[];\r\n}\r\n\r\nexport interface EnhancedCalculationResult {\r\n  totalEmissions: number;\r\n  materialEmissions: number;\r\n  transportEmissions: number;\r\n  energyEmissions: number;\r\n  breakdown: {\r\n    materials: number;\r\n    transport: number;\r\n    energy: number;\r\n  };\r\n  materialDetails: MaterialCalculationDetail[];\r\n  recommendations: string[];\r\n  sustainability: {\r\n    score: number;\r\n    greenStarCompliant: boolean;\r\n    recyclabilityScore: number;\r\n    confidence: number;\r\n  };\r\n}\r\n\r\nexport interface MaterialCalculationDetail {\r\n  id: string;\r\n  name: string;\r\n  quantity: number;\r\n  unit: string;\r\n  carbonFactor: number;\r\n  emissions: number;\r\n  confidence: number;\r\n  alternatives: AlternativeRecommendation[];\r\n  sustainabilityFeatures: string[];\r\n}\r\n\r\nexport interface AlternativeRecommendation {\r\n  name: string;\r\n  carbonReduction: number;\r\n  carbonFactor: number;\r\n  costImpact?: string;\r\n  benefits: string[];\r\n}\r\n\r\n/**\r\n * Enhanced carbon calculation that uses the material database\r\n */\r\nexport const calculateEnhancedEmissions = async (\r\n  input: EnhancedCalculationInput\r\n): Promise<EnhancedCalculationResult> => {\r\n  const materialDetails: MaterialCalculationDetail[] = [];\r\n  let totalMaterialEmissions = 0;\r\n  let totalSustainabilityScore = 0;\r\n  let totalConfidence = 0;\r\n  let greenStarCompliantCount = 0;\r\n  let recyclingScore = 0;\r\n\r\n  // Process each selected material\r\n  for (const selectedMaterial of input.materials) {\r\n    const emissions = selectedMaterial.quantity * selectedMaterial.carbonFactor;\r\n    totalMaterialEmissions += emissions;\r\n    \r\n    // Get alternatives for this material\r\n    const alternatives = await materialDatabaseService.findAlternatives(\r\n      selectedMaterial.material.material_type || selectedMaterial.material.name || '',\r\n      selectedMaterial.id\r\n    );\r\n\r\n    const alternativeRecommendations: AlternativeRecommendation[] = alternatives.map(alt => {\r\n      const altFactor = alt.carbon_footprint_kgco2e_kg || selectedMaterial.carbonFactor;\r\n      const reduction = ((selectedMaterial.carbonFactor - altFactor) / selectedMaterial.carbonFactor) * 100;\r\n      \r\n      return {\r\n        name: alt.name || '',\r\n        carbonFactor: altFactor,\r\n        carbonReduction: reduction,\r\n        costImpact: reduction > 0 ? 'Similar or lower cost' : 'May increase cost',\r\n        benefits: [\r\n          ...(alt.green_star_compliant ? ['Green Star Compliant'] : []),\r\n          ...(alt.recyclability === 'High' ? ['Highly Recyclable'] : []),\r\n          ...(alt.local_availability ? ['Locally Available'] : [])\r\n        ]\r\n      };\r\n    });\r\n\r\n    // Build sustainability features\r\n    const sustainabilityFeatures: string[] = [];\r\n    if (selectedMaterial.material.green_star_compliant) {\r\n      sustainabilityFeatures.push('Green Star Compliant');\r\n      greenStarCompliantCount++;\r\n    }\r\n    if (selectedMaterial.material.recyclability === 'High') {\r\n      sustainabilityFeatures.push('Highly Recyclable');\r\n      recyclingScore += 100;\r\n    } else if (selectedMaterial.material.recyclability === 'Medium') {\r\n      sustainabilityFeatures.push('Moderately Recyclable');\r\n      recyclingScore += 60;\r\n    } else {\r\n      recyclingScore += 20;\r\n    }\r\n    if (selectedMaterial.material.local_availability) {\r\n      sustainabilityFeatures.push('Locally Available');\r\n    }\r\n    if (selectedMaterial.material.certification_standards?.length) {\r\n      sustainabilityFeatures.push(`Certified: ${selectedMaterial.material.certification_standards.join(', ')}`);\r\n    }\r\n\r\n    materialDetails.push({\r\n      id: selectedMaterial.id,\r\n      name: selectedMaterial.material.name || '',\r\n      quantity: selectedMaterial.quantity,\r\n      unit: selectedMaterial.unit,\r\n      carbonFactor: selectedMaterial.carbonFactor,\r\n      emissions,\r\n      confidence: selectedMaterial.confidence,\r\n      alternatives: alternativeRecommendations,\r\n      sustainabilityFeatures\r\n    });\r\n\r\n    totalSustainabilityScore += selectedMaterial.material.sustainabilityScore || 50;\r\n    totalConfidence += selectedMaterial.confidence;\r\n  }\r\n\r\n  // Calculate transport emissions (enhanced with verification)\r\n  let transportEmissions = 0;\r\n  for (const transport of input.transport) {\r\n    const distance = Number(transport.distance) || 0;\r\n    const weight = Number(transport.weight) || 0;\r\n    const factor = transport.factor || getTransportFactor(transport.type);\r\n    transportEmissions += distance * weight * factor / 1000;\r\n  }\r\n\r\n  // Calculate energy emissions\r\n  let energyEmissions = 0;\r\n  for (const energy of input.energy) {\r\n    const amount = Number(energy.amount) || 0;\r\n    const factor = energy.factor || getEnergyFactor(energy.type);\r\n    energyEmissions += amount * factor;\r\n  }\r\n\r\n  const totalEmissions = totalMaterialEmissions + transportEmissions + energyEmissions;\r\n\r\n  // Generate recommendations\r\n  const recommendations = generateRecommendations(materialDetails, {\r\n    totalEmissions,\r\n    materialEmissions: totalMaterialEmissions,\r\n    transportEmissions,\r\n    energyEmissions\r\n  });\r\n\r\n  // Calculate overall sustainability metrics\r\n  const avgSustainabilityScore = input.materials.length > 0 \r\n    ? totalSustainabilityScore / input.materials.length \r\n    : 0;\r\n  const avgConfidence = input.materials.length > 0 \r\n    ? totalConfidence / input.materials.length \r\n    : 0;\r\n  const greenStarCompliant = greenStarCompliantCount / Math.max(input.materials.length, 1) >= 0.8;\r\n  const avgRecyclingScore = input.materials.length > 0 \r\n    ? recyclingScore / input.materials.length \r\n    : 0;\r\n\r\n  return {\r\n    totalEmissions,\r\n    materialEmissions: totalMaterialEmissions,\r\n    transportEmissions,\r\n    energyEmissions,\r\n    breakdown: {\r\n      materials: (totalMaterialEmissions / totalEmissions) * 100 || 0,\r\n      transport: (transportEmissions / totalEmissions) * 100 || 0,\r\n      energy: (energyEmissions / totalEmissions) * 100 || 0\r\n    },\r\n    materialDetails,\r\n    recommendations,\r\n    sustainability: {\r\n      score: avgSustainabilityScore,\r\n      greenStarCompliant,\r\n      recyclabilityScore: avgRecyclingScore,\r\n      confidence: avgConfidence\r\n    }\r\n  };\r\n};\r\n\r\nfunction generateRecommendations(\r\n  materialDetails: MaterialCalculationDetail[],\r\n  emissions: { totalEmissions: number; materialEmissions: number; transportEmissions: number; energyEmissions: number }\r\n): string[] {\r\n  const recommendations: string[] = [];\r\n\r\n  // Material-based recommendations\r\n  const highImpactMaterials = materialDetails\r\n    .filter(m => m.emissions > emissions.materialEmissions * 0.2)\r\n    .sort((a, b) => b.emissions - a.emissions);\r\n\r\n  if (highImpactMaterials.length > 0) {\r\n    const topMaterial = highImpactMaterials[0];\r\n    recommendations.push(\r\n      `Consider alternatives for ${topMaterial.name} (${(topMaterial.emissions/1000).toFixed(1)}t CO₂-e)`\r\n    );\r\n    \r\n    if (topMaterial.alternatives.length > 0) {\r\n      const bestAlternative = topMaterial.alternatives\r\n        .filter(alt => alt.carbonReduction > 0)\r\n        .sort((a, b) => b.carbonReduction - a.carbonReduction)[0];\r\n      \r\n      if (bestAlternative) {\r\n        recommendations.push(\r\n          `Switch to ${bestAlternative.name} for ${bestAlternative.carbonReduction.toFixed(1)}% carbon reduction`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // Low confidence materials\r\n  const lowConfidenceMaterials = materialDetails.filter(m => m.confidence < 60);\r\n  if (lowConfidenceMaterials.length > 0) {\r\n    recommendations.push(\r\n      `Verify carbon data for ${lowConfidenceMaterials.length} material(s) with low confidence ratings`\r\n    );\r\n  }\r\n\r\n  // Transport recommendations\r\n  if (emissions.transportEmissions > emissions.totalEmissions * 0.15) {\r\n    recommendations.push('Consider local sourcing to reduce transport emissions');\r\n  }\r\n\r\n  // Energy recommendations\r\n  if (emissions.energyEmissions > emissions.totalEmissions * 0.3) {\r\n    recommendations.push('Implement renewable energy sources to reduce operational emissions');\r\n  }\r\n\r\n  // General sustainability recommendations\r\n  const nonGreenStarMaterials = materialDetails.filter(m => \r\n    !m.sustainabilityFeatures.includes('Green Star Compliant')\r\n  );\r\n  if (nonGreenStarMaterials.length > materialDetails.length * 0.5) {\r\n    recommendations.push('Increase use of Green Star compliant materials for better sustainability rating');\r\n  }\r\n\r\n  return recommendations;\r\n}\r\n\r\n// Fallback factors for transport and energy\r\nfunction getTransportFactor(type: string): number {\r\n  const factors: Record<string, number> = {\r\n    truck: 0.10,\r\n    train: 0.03,\r\n    ship: 0.01,\r\n    plane: 1.50,\r\n    van: 0.25\r\n  };\r\n  return factors[type] || 0.10;\r\n}\r\n\r\nfunction getEnergyFactor(type: string): number {\r\n  const factors: Record<string, number> = {\r\n    electricity: 0.50,\r\n    naturalGas: 0.20,\r\n    renewableEnergy: 0.05,\r\n    diesel: 0.27,\r\n    coal: 0.34\r\n  };\r\n  return factors[type] || 0.50;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Leaf, Database, Star, CheckCircle, TrendingDown } from 'lucide-react';\r\nimport { EnhancedCalculatorResults } from '../enhanced';\r\nimport { ExtendedMaterialData } from '@/lib/materials/materialTypes';\r\nimport LifecyclePhaseFilter from '@/components/ui/lifecycle-phase-filter';\r\nimport EmbodiedCarbonClassifier from '@/components/ui/embodied-carbon-classifier';\r\nimport ScopeBadge from '@/components/ui/scope-badge';\r\nimport { MaterialSelector, SelectedMaterial } from '../materials/MaterialSelector';\r\nimport { calculateEnhancedEmissions, EnhancedCalculationResult } from '@/lib/enhancedCarbonCalculations';\r\n\r\ninterface LCACalculatorProps {\r\n  onCalculationUpdate: (data: LCAData) => void;\r\n}\r\n\r\ninterface LCAData {\r\n  totalLCA: number;\r\n  embodiedCarbon: number;\r\n  operationalCarbon: number;\r\n  endOfLifeCarbon: number;\r\n  materialBreakdown: Record<string, number>;\r\n  materialEmissions?: number;\r\n  transportEmissions?: number;\r\n  energyEmissions?: number;\r\n}\r\n\r\nexport const LCACalculator: React.FC<LCACalculatorProps> = ({ onCalculationUpdate }) => {\r\n  const [inputs, setInputs] = useState({\r\n    designLife: 50,\r\n    energy: 0,\r\n    water: 0,\r\n    transportDistance: 0,\r\n    transportWeight: 0\r\n  });\r\n\r\n  const [results, setResults] = useState<LCAData | null>(null);\r\n  const [enhancedResults, setEnhancedResults] = useState<EnhancedCalculationResult | null>(null);\r\n  const [selectedMaterials, setSelectedMaterials] = useState<SelectedMaterial[]>([]);\r\n  const [activePhase, setActivePhase] = useState<'embodied' | 'transport' | 'end-of-life' | 'all'>('all');\r\n  const [useDatabase, setUseDatabase] = useState(true);\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n\r\n  const calculateLCA = async () => {\r\n    setIsCalculating(true);\r\n    \r\n    try {\r\n      if (useDatabase && selectedMaterials.length > 0) {\r\n        // Enhanced calculation using material database\r\n        const { designLife, energy, water, transportDistance, transportWeight } = inputs;\r\n        \r\n        const enhancedInput = {\r\n          materials: selectedMaterials,\r\n          transport: transportDistance > 0 ? [{\r\n            type: 'truck',\r\n            distance: transportDistance,\r\n            weight: transportWeight || 1,\r\n            id: 'lca-transport'\r\n          }] : [],\r\n          energy: energy > 0 ? [{\r\n            type: 'electricity',\r\n            amount: energy * designLife,\r\n            id: 'lca-energy'\r\n          }] : []\r\n        };\r\n\r\n        const enhancedResults = await calculateEnhancedEmissions(enhancedInput);\r\n        setEnhancedResults(enhancedResults);\r\n\r\n        // Convert to legacy format for compatibility\r\n        const materialBreakdownObj: any = {};\r\n        enhancedResults.materialDetails.forEach(material => {\r\n          materialBreakdownObj[material.name.toLowerCase().replace(/\\s+/g, '')] = material.emissions;\r\n        });\r\n\r\n        const calculationResults: LCAData = {\r\n          totalLCA: enhancedResults.totalEmissions,\r\n          embodiedCarbon: enhancedResults.materialEmissions,\r\n          operationalCarbon: enhancedResults.energyEmissions,\r\n          endOfLifeCarbon: enhancedResults.materialEmissions * 0.05,\r\n          materialBreakdown: materialBreakdownObj,\r\n          materialEmissions: enhancedResults.materialEmissions,\r\n          transportEmissions: enhancedResults.transportEmissions,\r\n          energyEmissions: enhancedResults.energyEmissions\r\n        };\r\n\r\n        setResults(calculationResults);\r\n        onCalculationUpdate(calculationResults);\r\n      } else {\r\n        // Fallback to simplified calculation\r\n        const { designLife, energy, water } = inputs;\r\n        \r\n        // Simple operational calculation\r\n        const annualOperationalCarbon = energy * 0.82 + water * 0.3;\r\n        const totalOperational = annualOperationalCarbon * designLife;\r\n        \r\n        const calculationResults: LCAData = {\r\n          totalLCA: totalOperational,\r\n          embodiedCarbon: 0,\r\n          operationalCarbon: totalOperational,\r\n          endOfLifeCarbon: 0,\r\n          materialBreakdown: {},\r\n          materialEmissions: 0,\r\n          transportEmissions: 0,\r\n          energyEmissions: totalOperational\r\n        };\r\n\r\n        setResults(calculationResults);\r\n        onCalculationUpdate(calculationResults);\r\n        setEnhancedResults(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('LCA calculation failed:', error);\r\n    } finally {\r\n      setIsCalculating(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: keyof typeof inputs, value: string) => {\r\n    setInputs(prev => ({\r\n      ...prev,\r\n      [field]: parseFloat(value) || 0\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Leaf className=\"h-5 w-5\" />\r\n              Life Cycle Assessment\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant={useDatabase ? \"default\" : \"outline\"}>\r\n                <Database className=\"h-3 w-3 mr-1\" />\r\n                {useDatabase ? 'Database Mode' : 'Simple Mode'}\r\n              </Badge>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setUseDatabase(!useDatabase)}\r\n              >\r\n                {useDatabase ? 'Switch to Simple' : 'Use Database'}\r\n              </Button>\r\n            </div>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {useDatabase ? (\r\n            <div className=\"space-y-6\">\r\n              <div>\r\n                <Label className=\"text-sm font-medium mb-3 block\">Materials from Database</Label>\r\n                <MaterialSelector\r\n                  selectedMaterials={selectedMaterials}\r\n                  onMaterialChange={setSelectedMaterials}\r\n                  placeholder=\"Search and select materials from database...\"\r\n                />\r\n              </div>\r\n              \r\n              {enhancedResults && (\r\n                <Card className=\"bg-green-50 dark:bg-green-950/20\">\r\n                  <CardContent className=\"p-4\">\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n                      <div className=\"text-center\">\r\n                        <div className=\"text-sm text-green-600\">Sustainability Score</div>\r\n                        <div className=\"text-2xl font-bold text-green-700\">\r\n                          {enhancedResults.sustainability.score.toFixed(0)}/100\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <div className=\"text-sm text-blue-600\">Data Confidence</div>\r\n                        <div className=\"text-2xl font-bold text-blue-700\">\r\n                          {enhancedResults.sustainability.confidence.toFixed(0)}%\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <div className=\"text-sm text-purple-600\">Green Star</div>\r\n                        <div className=\"text-lg font-bold text-purple-700\">\r\n                          {enhancedResults.sustainability.greenStarCompliant ? (\r\n                            <><CheckCircle className=\"h-5 w-5 inline mr-1\" />Compliant</>\r\n                          ) : (\r\n                            'Not Compliant'\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <div className=\"text-sm text-orange-600\">Recyclability</div>\r\n                        <div className=\"text-2xl font-bold text-orange-700\">\r\n                          {enhancedResults.sustainability.recyclabilityScore.toFixed(0)}%\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-4\">\r\n              <Label className=\"text-sm font-medium\">Operational Parameters</Label>\r\n              \r\n              <div className=\"space-y-3\">\r\n                <div>\r\n                  <Label htmlFor=\"designLife\">Design Life (years)</Label>\r\n                  <Input\r\n                    id=\"designLife\"\r\n                    type=\"number\"\r\n                    min=\"10\"\r\n                    max=\"100\"\r\n                    value={inputs.designLife}\r\n                    onChange={(e) => handleInputChange('designLife', e.target.value)}\r\n                    placeholder=\"e.g., 50\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"energy\">Annual Energy Use (kWh)</Label>\r\n                  <Input\r\n                    id=\"energy\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    value={inputs.energy}\r\n                    onChange={(e) => handleInputChange('energy', e.target.value)}\r\n                    placeholder=\"e.g., 50000\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"water\">Annual Water Use (kL)</Label>\r\n                  <Input\r\n                    id=\"water\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    value={inputs.water}\r\n                    onChange={(e) => handleInputChange('water', e.target.value)}\r\n                    placeholder=\"e.g., 500\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            {useDatabase && (\r\n              <div className=\"space-y-4\">\r\n                <Label className=\"text-sm font-medium\">Transport Parameters</Label>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <Label htmlFor=\"transportDistance\">Transport Distance (km)</Label>\r\n                    <Input\r\n                      id=\"transportDistance\"\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      value={inputs.transportDistance}\r\n                      onChange={(e) => handleInputChange('transportDistance', e.target.value)}\r\n                      placeholder=\"e.g., 100\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"transportWeight\">Transport Weight (tonnes)</Label>\r\n                    <Input\r\n                      id=\"transportWeight\"\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      step=\"0.1\"\r\n                      value={inputs.transportWeight}\r\n                      onChange={(e) => handleInputChange('transportWeight', e.target.value)}\r\n                      placeholder=\"e.g., 50\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <Button \r\n            onClick={calculateLCA} \r\n            className=\"w-full\" \r\n            disabled={isCalculating || (useDatabase && selectedMaterials.length === 0)}\r\n          >\r\n            {isCalculating ? (\r\n              <>\r\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                Calculating...\r\n              </>\r\n            ) : (\r\n              'Calculate Life Cycle Assessment'\r\n            )}\r\n          </Button>\r\n          \r\n          {useDatabase && selectedMaterials.length === 0 && (\r\n            <p className=\"text-sm text-muted-foreground text-center\">\r\n              Please select materials from the database to perform enhanced calculations\r\n            </p>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {results && (\r\n        <div className=\"space-y-6\">\r\n          {/* LCA Overview with Scope Badges */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                LCA Results\r\n                <div className=\"flex items-center gap-2\">\r\n                  <ScopeBadge scope=\"combined\" size=\"sm\" />\r\n                  <EmbodiedCarbonClassifier \r\n                    carbonIntensity={results.totalLCA / 1000}\r\n                    size=\"sm\"\r\n                  />\r\n                </div>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground\">Embodied Carbon</div>\r\n                  <div className=\"text-2xl font-bold text-orange-600\">\r\n                    {(results.embodiedCarbon / 1000).toFixed(1)} t CO₂-e\r\n                  </div>\r\n                  <ScopeBadge scope=\"scope3\" size=\"sm\" showTooltip={false} />\r\n                </Card>\r\n\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground\">Operational Carbon</div>\r\n                  <div className=\"text-2xl font-bold text-blue-600\">\r\n                    {(results.operationalCarbon / 1000).toFixed(1)} t CO₂-e\r\n                  </div>\r\n                  <ScopeBadge scope=\"scope2\" size=\"sm\" showTooltip={false} />\r\n                </Card>\r\n\r\n                <Card className=\"p-4\">\r\n                  <div className=\"text-sm text-muted-foreground\">End of Life</div>\r\n                  <div className=\"text-2xl font-bold text-purple-600\">\r\n                    {(results.endOfLifeCarbon / 1000).toFixed(1)} t CO₂-e\r\n                  </div>\r\n                  <ScopeBadge scope=\"scope3\" size=\"sm\" showTooltip={false} />\r\n                </Card>\r\n\r\n                <Card className=\"p-4 bg-green-50 dark:bg-green-950/20\">\r\n                  <div className=\"text-sm text-muted-foreground\">Total LCA</div>\r\n                  <div className=\"text-2xl font-bold text-green-700 dark:text-green-300\">\r\n                    {(results.totalLCA / 1000).toFixed(1)} t CO₂-e\r\n                  </div>\r\n                  <ScopeBadge scope=\"combined\" size=\"sm\" showTooltip={false} />\r\n                </Card>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Lifecycle Phase Filter */}\r\n          <LifecyclePhaseFilter\r\n            activePhase={activePhase}\r\n            onPhaseChange={setActivePhase}\r\n            emissionsByPhase={{\r\n              embodied: results.embodiedCarbon,\r\n              transport: results.transportEmissions || 0,\r\n              endOfLife: results.endOfLifeCarbon\r\n            }}\r\n          />\r\n\r\n          {/* Enhanced Calculator Results */}\r\n          <EnhancedCalculatorResults\r\n            result={{\r\n              totalEmissions: results.totalLCA,\r\n              materialEmissions: results.materialEmissions || 0,\r\n              transportEmissions: results.transportEmissions || 0,\r\n              energyEmissions: results.energyEmissions || 0,\r\n              breakdown: {\r\n                materials: results.materialEmissions || 0,\r\n                transport: results.transportEmissions || 0,\r\n                energy: results.energyEmissions || 0,\r\n              },\r\n              breakdownByMaterial: results.materialBreakdown,\r\n              breakdownByTransport: { delivery: results.transportEmissions || 0 },\r\n              breakdownByEnergy: { operational: results.energyEmissions || 0 }\r\n            }}\r\n            materials={selectedMaterials}\r\n            onMaterialSelect={(material) => {\r\n              console.log('Selected LCA material for optimization:', material);\r\n            }}\r\n          />\r\n\r\n            {Object.keys(results.materialBreakdown).length > 0 && (\r\n              <Card className=\"p-4\">\r\n                <h4 className=\"font-semibold mb-3\">Material Breakdown</h4>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  {Object.entries(results.materialBreakdown).map(([material, emissions]) => (\r\n                    <div key={material} className=\"text-center\">\r\n                      <div className=\"text-lg font-semibold text-gray-600 capitalize\">{material}</div>\r\n                      <div className={`text-xl font-bold ${emissions >= 0 ? 'text-red-600' : 'text-green-600'}`}>\r\n                        {(emissions / 1000).toFixed(1)} t CO₂-e\r\n                      </div>\r\n                      {emissions < 0 && (\r\n                        <div className=\"text-xs text-green-600\">Carbon Sequestration</div>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </Card>\r\n            )}\r\n\r\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\r\n            <h4 className=\"font-semibold mb-2\">LCA Insights</h4>\r\n            <div className=\"text-sm text-muted-foreground space-y-1\">\r\n              <p>• <strong>Embodied Carbon:</strong> Upfront emissions from materials and construction</p>\r\n              <p>• <strong>Operational Carbon:</strong> Emissions over the building's operational life</p>\r\n              <p>• <strong>End of Life:</strong> Estimated emissions from demolition and disposal</p>\r\n              <p>• <strong>Timber:</strong> Shows negative emissions due to carbon sequestration</p>\r\n              <p>• Consider material substitutions to reduce embodied carbon footprint</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":["MaterialDatabaseService","__publicField","filters","limit","user","supabase","query","data","error","materialName","fallbackFactor","cacheKey","cached","materialData","carbonFactor","alternatives","result","materialType","excludeId","category","material","confidence","materialDatabaseService","useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","timerRef","useRef","useEffect","MaterialSelector","selectedMaterials","onMaterialChange","placeholder","isOpen","setIsOpen","searchTerm","setSearchTerm","searchResults","setSearchResults","popularMaterials","setPopularMaterials","setFilters","isLoading","setIsLoading","debouncedSearchTerm","loadPopularMaterials","searchMaterials","materials","addMaterial","lookupResult","newSelectedMaterial","updatedMaterials","updateMaterialQuantity","materialId","quantity","m","removeMaterial","getConfidenceColor","getConfidenceIcon","jsx","CheckCircle","AlertTriangle","displayMaterials","jsxs","Card","CardHeader","CardTitle","CardContent","selectedMaterial","Badge","Star","Input","e","Button","Dialog","DialogTrigger","Plus","DialogContent","DialogHeader","DialogTitle","Search","Select","prev","SelectTrigger","SelectValue","SelectContent","SelectItem","Leaf","_a","calculateEnhancedEmissions","input","materialDetails","totalMaterialEmissions","totalSustainabilityScore","totalConfidence","greenStarCompliantCount","recyclingScore","emissions","alternativeRecommendations","alt","altFactor","reduction","sustainabilityFeatures","transportEmissions","transport","distance","weight","factor","getTransportFactor","energyEmissions","energy","amount","getEnergyFactor","totalEmissions","recommendations","generateRecommendations","avgSustainabilityScore","avgConfidence","greenStarCompliant","avgRecyclingScore","highImpactMaterials","a","b","topMaterial","bestAlternative","lowConfidenceMaterials","type","LCACalculator","onCalculationUpdate","inputs","setInputs","results","setResults","enhancedResults","setEnhancedResults","setSelectedMaterials","activePhase","setActivePhase","useDatabase","setUseDatabase","isCalculating","setIsCalculating","calculateLCA","designLife","water","transportDistance","transportWeight","enhancedInput","materialBreakdownObj","calculationResults","totalOperational","handleInputChange","field","Database","Label","Fragment","ScopeBadge","EmbodiedCarbonClassifier","LifecyclePhaseFilter","EnhancedCalculatorResults"],"mappings":"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"}