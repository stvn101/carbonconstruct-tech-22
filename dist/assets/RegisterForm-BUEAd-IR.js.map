{"version":3,"file":"RegisterForm-BUEAd-IR.js","sources":["../../src/utils/authHelpers.ts","../../src/components/auth/PasswordStrengthMeter.tsx","../../src/components/auth/RegisterForm.tsx"],"sourcesContent":["\r\nimport { toast } from 'sonner';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Session } from '@supabase/supabase-js';\r\n\r\n// Rate limiting store (in production, this should be server-side)\r\nconst rateLimitStore = new Map<string, { attempts: number; lastAttempt: number }>();\r\n\r\n/**\r\n * Rate limiting for authentication attempts\r\n */\r\nexport const checkRateLimit = (identifier: string, maxAttempts = 5, windowMs = 15 * 60 * 1000): boolean => {\r\n  const now = Date.now();\r\n  const record = rateLimitStore.get(identifier);\r\n  \r\n  if (!record) {\r\n    rateLimitStore.set(identifier, { attempts: 1, lastAttempt: now });\r\n    return true;\r\n  }\r\n  \r\n  // Reset if window has passed\r\n  if (now - record.lastAttempt > windowMs) {\r\n    rateLimitStore.set(identifier, { attempts: 1, lastAttempt: now });\r\n    return true;\r\n  }\r\n  \r\n  // Increment attempts\r\n  record.attempts += 1;\r\n  record.lastAttempt = now;\r\n  \r\n  if (record.attempts > maxAttempts) {\r\n    toast.error(`Too many attempts. Please wait ${Math.ceil(windowMs / 60000)} minutes before trying again.`);\r\n    return false;\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\n/**\r\n * Enhanced password validation with security requirements\r\n */\r\nexport const validatePassword = (password: string): { valid: boolean; message: string } => {\r\n  if (password.length < 12) {\r\n    return { valid: false, message: 'Password must be at least 12 characters' };\r\n  }\r\n  \r\n  if (!/[A-Z]/.test(password)) {\r\n    return { valid: false, message: 'Password must contain at least one uppercase letter' };\r\n  }\r\n  \r\n  if (!/[a-z]/.test(password)) {\r\n    return { valid: false, message: 'Password must contain at least one lowercase letter' };\r\n  }\r\n  \r\n  if (!/[0-9]/.test(password)) {\r\n    return { valid: false, message: 'Password must contain at least one number' };\r\n  }\r\n  \r\n  if (!/[^A-Za-z0-9]/.test(password)) {\r\n    return { valid: false, message: 'Password must contain at least one special character' };\r\n  }\r\n  \r\n  // Check for consecutive repeated characters\r\n  if (/(.)\\1{2,}/.test(password)) {\r\n    return { valid: false, message: 'Password must not contain more than 2 consecutive identical characters' };\r\n  }\r\n  \r\n  // Enhanced common pattern detection\r\n  const commonPatterns = [\r\n    'password', 'qwerty', 'admin', 'welcome', 'abc123', '111111', '123123', \r\n    'dragon', 'baseball', 'football', 'letmein', 'monkey', 'superman',\r\n    '123456789', 'iloveyou', 'trustno1', 'sunshine', 'master', 'hello'\r\n  ];\r\n  \r\n  const lowercasePassword = password.toLowerCase();\r\n  for (const pattern of commonPatterns) {\r\n    if (lowercasePassword.includes(pattern)) {\r\n      return { valid: false, message: 'Password contains a common pattern and is too predictable' };\r\n    }\r\n  }\r\n  \r\n  // Check for keyboard patterns\r\n  const keyboardPatterns = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm', '1234567890'];\r\n  for (const pattern of keyboardPatterns) {\r\n    if (lowercasePassword.includes(pattern.substring(0, 4))) {\r\n      return { valid: false, message: 'Password contains keyboard patterns' };\r\n    }\r\n  }\r\n  \r\n  return { valid: true, message: 'Password meets all security requirements' };\r\n};\r\n\r\n/**\r\n * Enhanced error handling with security considerations\r\n */\r\nexport const handleAuthError = (error: unknown): string => {\r\n  const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\r\n  \r\n  // Log security events (in production, send to security monitoring)\r\n  console.warn('Authentication error:', {\r\n    message: errorMessage,\r\n    timestamp: new Date().toISOString(),\r\n    userAgent: navigator.userAgent\r\n  });\r\n  \r\n  // Generic error messages to prevent information disclosure\r\n  if (errorMessage.includes('Email not confirmed')) {\r\n    return 'Please verify your email address before signing in';\r\n  }\r\n  \r\n  if (errorMessage.includes('Invalid login credentials') || \r\n      errorMessage.includes('Invalid email') || \r\n      errorMessage.includes('Invalid password')) {\r\n    return 'Invalid credentials. Please check your email and password.';\r\n  }\r\n  \r\n  if (errorMessage.includes('User already registered')) {\r\n    return 'An account with this email already exists';\r\n  }\r\n  \r\n  if (errorMessage.includes('Email rate limit exceeded')) {\r\n    return 'Too many email requests. Please wait before requesting another.';\r\n  }\r\n  \r\n  if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\r\n    return 'Network error. Please check your connection and try again.';\r\n  }\r\n  \r\n  // Generic fallback to prevent information leakage\r\n  return 'Authentication failed. Please try again or contact support if the problem persists.';\r\n};\r\n\r\n/**\r\n * Secure session refresh with error handling\r\n */\r\nexport const refreshSession = async (): Promise<Session | null> => {\r\n  try {\r\n    const { data, error } = await supabase.auth.refreshSession();\r\n    if (error) {\r\n      console.warn('Session refresh failed:', error.message);\r\n      return null;\r\n    }\r\n    return data.session;\r\n  } catch (error) {\r\n    console.error('Session refresh error:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Enhanced role checking with caching\r\n */\r\nconst roleCache = new Map<string, { role: string; timestamp: number }>();\r\nconst ROLE_CACHE_TTL = 5 * 60 * 1000; // 5 minutes\r\n\r\nexport const hasRole = async (userId: string, role: string): Promise<boolean> => {\r\n  try {\r\n    // Check cache first\r\n    const cached = roleCache.get(userId);\r\n    if (cached && Date.now() - cached.timestamp < ROLE_CACHE_TTL) {\r\n      return cached.role === role;\r\n    }\r\n    \r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', userId)\r\n      .single();\r\n      \r\n    if (error) {\r\n      console.warn('Role check failed:', error.message);\r\n      return false;\r\n    }\r\n    \r\n    // Cache the result\r\n    roleCache.set(userId, { role: data?.role || '', timestamp: Date.now() });\r\n    \r\n    return data?.role === role;\r\n  } catch (error) {\r\n    console.error('Role check error:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Secure input sanitization\r\n */\r\nexport const sanitizeInput = (input: string): string => {\r\n  return input\r\n    .trim()\r\n    .replace(/[<>]/g, '') // Remove basic HTML chars\r\n    .replace(/javascript:/gi, '') // Remove javascript: protocols\r\n    .replace(/on\\w+=/gi, ''); // Remove event handlers\r\n};\r\n\r\n/**\r\n * Password strength scoring (0-4)\r\n */\r\nexport const getPasswordStrength = (password: string): { score: number; label: string } => {\r\n  let score = 0;\r\n  \r\n  // Length scoring\r\n  if (password.length >= 8) score += 0.5;\r\n  if (password.length >= 12) score += 0.5;\r\n  if (password.length >= 16) score += 0.5;\r\n  \r\n  // Character type scoring\r\n  if (/[A-Z]/.test(password)) score += 0.5;\r\n  if (/[a-z]/.test(password)) score += 0.5;\r\n  if (/[0-9]/.test(password)) score += 0.5;\r\n  if (/[^A-Za-z0-9]/.test(password)) score += 0.5;\r\n  \r\n  // Complexity bonus\r\n  if (/[A-Z].*[A-Z]/.test(password)) score += 0.25;\r\n  if (/[^A-Za-z0-9].*[^A-Za-z0-9]/.test(password)) score += 0.25;\r\n  if (password.length >= 20) score += 0.25;\r\n  \r\n  // Pattern penalties\r\n  if (/(.)\\1{2,}/.test(password)) score -= 0.5;\r\n  if (/123|abc|qwerty|password/i.test(password)) score -= 1;\r\n  \r\n  score = Math.max(0, Math.min(4, score));\r\n  \r\n  const labels = ['Very Weak', 'Weak', 'Fair', 'Strong', 'Very Strong'];\r\n  return { score, label: labels[Math.floor(score)] };\r\n};\r\n\r\n/**\r\n * Secure URL validation for redirects\r\n */\r\nexport const validateRedirectUrl = (url: string): boolean => {\r\n  try {\r\n    const parsedUrl = new URL(url, window.location.origin);\r\n    \r\n    // Only allow same origin redirects\r\n    if (parsedUrl.origin !== window.location.origin) {\r\n      return false;\r\n    }\r\n    \r\n    // Block suspicious paths\r\n    const suspiciousPaths = ['/admin', '/api', '//'];\r\n    if (suspiciousPaths.some(path => parsedUrl.pathname.includes(path))) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n","\r\nimport React from 'react';\r\nimport { getPasswordStrength } from '@/utils/authHelpers';\r\n\r\ninterface PasswordStrengthMeterProps {\r\n  password: string;\r\n}\r\n\r\nconst PasswordStrengthMeter: React.FC<PasswordStrengthMeterProps> = ({ password }) => {\r\n  const { score, label } = getPasswordStrength(password);\r\n  \r\n  if (!password) {\r\n    return null;\r\n  }\r\n  \r\n  // Define colors for different strength levels\r\n  const getColorForScore = (score: number): string => {\r\n    switch (Math.floor(score)) {\r\n      case 0: return 'bg-destructive'; // Very Weak\r\n      case 1: return 'bg-orange-500'; // Weak  \r\n      case 2: return 'bg-warning'; // Medium\r\n      case 3: return 'bg-blue-500'; // Strong\r\n      case 4: return 'bg-green-500'; // Very Strong\r\n      default: return 'bg-gray-300';\r\n    }\r\n  };\r\n\r\n  // Create array of 5 bars\r\n  const bars = Array.from({ length: 5 }, (_, i) => {\r\n    const isActive = i < score * (5/4); // Convert score (0-4) to 5 bars\r\n    return (\r\n      <div\r\n        key={i}\r\n        className={`h-1.5 flex-1 rounded-full mx-0.5 transition-all duration-300 ${\r\n          isActive ? getColorForScore(score) : 'bg-gray-200 dark:bg-gray-700'\r\n        }`}\r\n      ></div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <div className=\"flex mb-1\">\r\n        {bars}\r\n      </div>\r\n      <p className={`text-xs ${getTextColor(score)}`}>\r\n        Password strength: <span className=\"font-semibold\">{label}</span>\r\n      </p>\r\n      {score <= 2 && (\r\n        <ul className=\"text-xs mt-1 text-gray-600 dark:text-gray-400 list-disc list-inside\">\r\n          {score < 2 && <li>Use at least 10 characters</li>}\r\n          {!(/[A-Z]/.test(password)) && <li>Add uppercase letters</li>}\r\n          {!(/[a-z]/.test(password)) && <li>Add lowercase letters</li>}\r\n          {!(/[0-9]/.test(password)) && <li>Add numbers</li>}\r\n          {!(/[^A-Za-z0-9]/.test(password)) && <li>Add special characters</li>}\r\n          {/(.)\\1\\1/.test(password) && <li>Avoid repeated characters</li>}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getTextColor = (score: number): string => {\r\n  switch (Math.floor(score)) {\r\n    case 0: return 'text-destructive';\r\n    case 1: return 'text-orange-500 dark:text-orange-400';  \r\n    case 2: return 'text-warning';\r\n    case 3: return 'text-blue-500 dark:text-blue-400';\r\n    case 4: return 'text-green-500 dark:text-green-400';\r\n    default: return 'text-gray-500 dark:text-gray-400';\r\n  }\r\n};\r\n\r\nexport default PasswordStrengthMeter;\r\n","\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Loader2 } from \"lucide-react\";\r\nimport { useAuth } from \"@/contexts/auth\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/components/ui/form\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { registerSchema, type RegisterFormValues } from \"@/lib/validations/auth\";\r\nimport AuthFormError from \"./AuthFormError\";\r\nimport EmailField from \"./form-fields/EmailField\";\r\nimport PasswordField from \"./form-fields/PasswordField\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport PasswordStrengthMeter from \"./PasswordStrengthMeter\";\r\n\r\ninterface RegisterFormProps {\r\n  returnTo?: string;\r\n}\r\n\r\nconst RegisterForm = ({ returnTo = \"/dashboard\" }: RegisterFormProps) => {\r\n  const { register, signInWithGoogle } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [serverError, setServerError] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [isGoogleLoading, setIsGoogleLoading] = useState<boolean>(false);\r\n  const [password, setPassword] = useState<string>(\"\");\r\n\r\n  const form = useForm<RegisterFormValues>({\r\n    resolver: zodResolver(registerSchema),\r\n    defaultValues: {\r\n      full_name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n  \r\n  // Watch password field for strength meter\r\n  useEffect(() => {\r\n    const subscription = form.watch((value, { name }) => {\r\n      if (name === 'password') {\r\n        setPassword(value.password || \"\");\r\n      }\r\n    });\r\n    return () => subscription.unsubscribe();\r\n  }, [form.watch]);\r\n\r\n  const handleSubmit = async (data: RegisterFormValues) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setServerError(null);\r\n      await register(data.full_name, data.email, data.password);\r\n      navigate(returnTo, { state: { fromAuth: true } });\r\n    } catch (error: any) {\r\n      setServerError(error.message || \"Registration failed\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGoogleLogin = async () => {\r\n    try {\r\n      setServerError(null);\r\n      setIsGoogleLoading(true);\r\n      \r\n      // Store return URL in session storage for the callback\r\n      sessionStorage.setItem('authReturnUrl', returnTo);\r\n      \r\n      await signInWithGoogle();\r\n    } catch (error: any) {\r\n      setServerError(`Google login failed: ${error.message}`);\r\n      setIsGoogleLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\r\n          <AuthFormError error={serverError} />\r\n          \r\n          <FormField\r\n            control={form.control}\r\n            name=\"full_name\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Name</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Full Name\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          \r\n          <EmailField form={form} />\r\n          \r\n          <div className=\"space-y-1\">\r\n            <PasswordField form={form} />\r\n            <PasswordStrengthMeter password={password} />\r\n          </div>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            className=\"w-full bg-carbon-600 hover:bg-carbon-700 border border-black dark:border-white/10\"\r\n            disabled={isLoading}\r\n          >\r\n            {isLoading ? (\r\n              <>\r\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Signing Up\r\n              </>\r\n            ) : (\r\n              \"Sign Up\"\r\n            )}\r\n          </Button>\r\n\r\n          <div className=\"relative my-6\">\r\n            <Separator />\r\n            <div className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 px-2 text-muted-foreground text-sm\">\r\n              Or continue with\r\n            </div>\r\n          </div>\r\n          \r\n          <Button \r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            onClick={handleGoogleLogin}\r\n            disabled={isGoogleLoading}\r\n            className=\"w-full border-gray-300 dark:border-gray-600\"\r\n          >\r\n            {isGoogleLoading ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n            ) : (\r\n              <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\r\n                <path\r\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\r\n                  fill=\"#4285F4\"\r\n                />\r\n                <path\r\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\r\n                  fill=\"#34A853\"\r\n                />\r\n                <path\r\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\r\n                  fill=\"#FBBC05\"\r\n                />\r\n                <path\r\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\r\n                  fill=\"#EA4335\"\r\n                />\r\n              </svg>\r\n            )}\r\n            Continue with Google\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n"],"names":["getPasswordStrength","password","score","PasswordStrengthMeter","label","getColorForScore","bars","_","i","isActive","jsx","jsxs","getTextColor","RegisterForm","returnTo","register","signInWithGoogle","useAuth","navigate","useNavigate","serverError","setServerError","useState","isLoading","setIsLoading","isGoogleLoading","setIsGoogleLoading","setPassword","form","useForm","zodResolver","registerSchema","useEffect","subscription","value","name","handleSubmit","data","error","handleGoogleLogin","Form","AuthFormError","FormField","field","FormItem","FormLabel","FormControl","Input","FormMessage","EmailField","PasswordField","Button","Fragment","Loader2","Separator"],"mappings":"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"}