{"version":3,"file":"GrokUsageDisplay-DqN_3_1n.js","sources":["../../node_modules/lucide-react/dist/esm/icons/key.js","../../src/components/grok/GrokUsageDisplay.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Key = createLucideIcon(\"Key\", [\n  [\"path\", { d: \"m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4\", key: \"g0fldk\" }],\n  [\"path\", { d: \"m21 2-9.6 9.6\", key: \"1j0ho8\" }],\n  [\"circle\", { cx: \"7.5\", cy: \"15.5\", r: \"5.5\", key: \"yqb3hr\" }]\n]);\n\nexport { Key as default };\n//# sourceMappingURL=key.js.map\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\r\nimport { Info, BarChart, AlertTriangle } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/auth'; // Fixed import path\r\n\r\ninterface UsageData {\r\n  totalTokens: number;\r\n  usageByFeature: Record<string, number>;\r\n  requestCount: number;\r\n  lastUsed: string;\r\n  monthlyQuota: number;\r\n}\r\n\r\ninterface GrokUsageDisplayProps {\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\n// Define the expected shape of grok_usage records\r\ninterface GrokUsageRecord {\r\n  id: string;\r\n  user_id: string;\r\n  feature: string;\r\n  tokens_used: number;\r\n  timestamp: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nconst GrokUsageDisplay: React.FC<GrokUsageDisplayProps> = ({ \r\n  compact = false,\r\n  className = '' \r\n}) => {\r\n  const { user } = useAuth();\r\n  const [usageData, setUsageData] = useState<UsageData | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // Fetch usage data from database or localStorage\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    \r\n    const fetchUsageData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // Get the current month's first and last day\r\n        const now = new Date();\r\n        const firstDay = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\r\n        const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString();\r\n        \r\n        // For now, use local storage as a fallback since the grok_usage table might not exist yet\r\n        let totalTokens = 0;\r\n        let requestCount = 0;\r\n        const usageByFeature: Record<string, number> = {};\r\n        let lastUsedDate = 'Never';\r\n        \r\n        // Try to get usage from localStorage first\r\n        const storedUsage = localStorage.getItem('grok_usage');\r\n        if (storedUsage) {\r\n          try {\r\n            const parsedUsage = JSON.parse(storedUsage);\r\n            totalTokens = parsedUsage.totalTokens || 0;\r\n            requestCount = parsedUsage.requestCount || 0;\r\n            Object.assign(usageByFeature, parsedUsage.usageByFeature || {});\r\n            lastUsedDate = parsedUsage.lastUsed || 'Never';\r\n          } catch (e) {\r\n            console.warn('Failed to parse stored usage data', e);\r\n          }\r\n        }\r\n                \r\n        // Set default monthly quota based on user's tier\r\n        const monthlyQuota = 100000; // Default quota\r\n        \r\n        setUsageData({\r\n          totalTokens,\r\n          usageByFeature,\r\n          requestCount,\r\n          lastUsed: lastUsedDate,\r\n          monthlyQuota\r\n        });\r\n      } catch (e) {\r\n        console.error('Error fetching Grok usage:', e);\r\n        setError('Failed to load usage data. Please try again later.');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchUsageData();\r\n  }, [user]);\r\n  \r\n  // Format usage percentage\r\n  const getUsagePercentage = () => {\r\n    if (!usageData || usageData.monthlyQuota === 0) return 0;\r\n    return Math.min(100, (usageData.totalTokens / usageData.monthlyQuota) * 100);\r\n  };\r\n  \r\n  // Determine progress color based on usage percentage\r\n  const getProgressColor = () => {\r\n    const percentage = getUsagePercentage();\r\n    if (percentage > 90) return 'bg-red-600';\r\n    if (percentage > 75) return 'bg-amber-500';\r\n    return 'bg-carbon-600';\r\n  };\r\n  \r\n  if (!user) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <BarChart className=\"h-5 w-5 mr-2 text-carbon-600\" />\r\n            Grok AI Usage\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Sign in to view your Grok AI usage statistics\r\n          </CardDescription>\r\n        </CardHeader>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  if (isLoading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Grok AI Usage</CardTitle>\r\n          <CardDescription>Loading usage data...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-center h-24\">\r\n            <div className=\"animate-pulse bg-carbon-100 dark:bg-carbon-700 rounded-md w-full h-6\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  if (error) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle>Grok AI Usage</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert variant=\"destructive\">\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <AlertTitle>Error</AlertTitle>\r\n            <AlertDescription>{error}</AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  if (compact) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader className=\"pb-2\">\r\n          <CardTitle className=\"text-sm flex items-center\">\r\n            <BarChart className=\"h-4 w-4 mr-2 text-carbon-600\" />\r\n            Grok AI Tokens\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-2\">\r\n            <Progress \r\n              value={getUsagePercentage()} \r\n              className=\"h-2\"\r\n              indicatorClassName={getProgressColor()}\r\n            />\r\n            <div className=\"flex justify-between text-xs text-carbon-600 dark:text-carbon-300\">\r\n              <span>{usageData?.totalTokens.toLocaleString()} used</span>\r\n              <span>{getUsagePercentage().toFixed(1)}%</span>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center\">\r\n          <BarChart className=\"h-5 w-5 mr-2 text-carbon-600\" />\r\n          Grok AI Usage\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Your current Grok AI usage for this billing period\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-6\">\r\n          {/* Usage Progress */}\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-sm font-medium\">Token Usage</span>\r\n              <span className=\"text-sm text-carbon-600 dark:text-carbon-300\">\r\n                {usageData?.totalTokens.toLocaleString()} / {usageData?.monthlyQuota.toLocaleString()}\r\n              </span>\r\n            </div>\r\n            <Progress \r\n              value={getUsagePercentage()} \r\n              className=\"h-2\"\r\n              indicatorClassName={getProgressColor()}\r\n            />\r\n            <div className=\"flex justify-end\">\r\n              <span className=\"text-xs text-carbon-600 dark:text-carbon-300\">\r\n                {getUsagePercentage().toFixed(1)}% used\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Feature Breakdown */}\r\n          <div>\r\n            <h4 className=\"text-sm font-medium mb-2\">Usage by Feature</h4>\r\n            <div className=\"space-y-1.5\">\r\n              {Object.entries(usageData?.usageByFeature || {}).map(([feature, tokens]) => (\r\n                <div key={feature} className=\"flex justify-between\">\r\n                  <span className=\"text-xs capitalize\">\r\n                    {feature.replace('_', ' ')}\r\n                  </span>\r\n                  <span className=\"text-xs text-carbon-600 dark:text-carbon-300\">\r\n                    {tokens.toLocaleString()} tokens\r\n                  </span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Stats */}\r\n          <div className=\"grid grid-cols-2 gap-4 pt-2\">\r\n            <div className=\"bg-carbon-50 dark:bg-carbon-800 p-3 rounded-md\">\r\n              <div className=\"text-xs text-carbon-500 dark:text-carbon-400\">Total Requests</div>\r\n              <div className=\"text-lg font-semibold\">{usageData?.requestCount || 0}</div>\r\n            </div>\r\n            <div className=\"bg-carbon-50 dark:bg-carbon-800 p-3 rounded-md\">\r\n              <div className=\"text-xs text-carbon-500 dark:text-carbon-400\">Last Used</div>\r\n              <div className=\"text-sm font-semibold\">\r\n                {usageData?.lastUsed !== 'Never' ? \r\n                  new Date(usageData?.lastUsed || '').toLocaleDateString() : \r\n                  'Never'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Warning for high usage */}\r\n          {getUsagePercentage() > 80 && (\r\n            <Alert>\r\n              <Info className=\"h-4 w-4\" />\r\n              <AlertTitle>High Usage Alert</AlertTitle>\r\n              <AlertDescription>\r\n                You've used {getUsagePercentage().toFixed(0)}% of your monthly quota. \r\n                Consider upgrading your plan for additional capacity.\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default GrokUsageDisplay;\r\n"],"names":["Key","createLucideIcon","GrokUsageDisplay","compact","className","user","useAuth","usageData","setUsageData","useState","isLoading","setIsLoading","error","setError","useEffect","now","firstDay","lastDay","totalTokens","requestCount","usageByFeature","lastUsedDate","storedUsage","parsedUsage","e","getUsagePercentage","getProgressColor","percentage","jsxs","Card","CardHeader","jsx","CardTitle","CardDescription","CardContent","Alert","AlertTriangle","AlertTitle","AlertDescription","BarChart","Progress","feature","tokens","Info"],"mappings":"kNAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASK,MAACA,EAAMC,EAAiB,MAAO,CAClC,CAAC,OAAQ,CAAE,EAAG,iEAAkE,IAAK,QAAQ,CAAE,EAC/F,CAAC,OAAQ,CAAE,EAAG,gBAAiB,IAAK,QAAQ,CAAE,EAC9C,CAAC,SAAU,CAAE,GAAI,MAAO,GAAI,OAAQ,EAAG,MAAO,IAAK,QAAQ,CAAE,CAC/D,CAAC,ECmBKC,EAAoD,CAAC,CACzD,QAAAC,EAAU,GACV,UAAAC,EAAY,EACd,IAAM,CACJ,KAAM,CAAE,KAAAC,CAAA,EAASC,EAAA,EACX,CAACC,EAAWC,CAAY,EAAIC,EAAAA,SAA2B,IAAI,EAC3D,CAACC,EAAWC,CAAY,EAAIF,EAAAA,SAAS,EAAI,EACzC,CAACG,EAAOC,CAAQ,EAAIJ,EAAAA,SAAwB,IAAI,EAGtDK,EAAAA,UAAU,IAAM,CACd,GAAI,CAACT,EAAM,CACTM,EAAa,EAAK,EAClB,MACF,EAEuB,SAAY,CACjC,GAAI,CACFA,EAAa,EAAI,EAGjB,MAAMI,MAAU,KACVC,EAAW,IAAI,KAAKD,EAAI,YAAA,EAAeA,EAAI,SAAA,EAAY,CAAC,EAAE,YAAA,EAC1DE,EAAU,IAAI,KAAKF,EAAI,YAAA,EAAeA,EAAI,WAAa,EAAG,CAAC,EAAE,YAAA,EAGnE,IAAIG,EAAc,EACdC,EAAe,EACnB,MAAMC,EAAyC,CAAA,EAC/C,IAAIC,EAAe,QAGnB,MAAMC,EAAc,aAAa,QAAQ,YAAY,EACrD,GAAIA,EACF,GAAI,CACF,MAAMC,EAAc,KAAK,MAAMD,CAAW,EAC1CJ,EAAcK,EAAY,aAAe,EACzCJ,EAAeI,EAAY,cAAgB,EAC3C,OAAO,OAAOH,EAAgBG,EAAY,gBAAkB,CAAA,CAAE,EAC9DF,EAAeE,EAAY,UAAY,OACzC,OAASC,EAAG,CACV,QAAQ,KAAK,oCAAqCA,CAAC,CACrD,CAMFhB,EAAa,CACX,YAAAU,EACA,eAAAE,EACA,aAAAD,EACA,SAAUE,EACV,aAPmB,GAOnB,CACD,CACH,OAASG,EAAG,CACV,QAAQ,MAAM,6BAA8BA,CAAC,EAC7CX,EAAS,oDAAoD,CAC/D,QAAA,CACEF,EAAa,EAAK,CACpB,CACF,GAEA,CACF,EAAG,CAACN,CAAI,CAAC,EAGT,MAAMoB,EAAqB,IACrB,CAAClB,GAAaA,EAAU,eAAiB,EAAU,EAChD,KAAK,IAAI,IAAMA,EAAU,YAAcA,EAAU,aAAgB,GAAG,EAIvEmB,EAAmB,IAAM,CAC7B,MAAMC,EAAaF,EAAA,EACnB,OAAIE,EAAa,GAAW,aACxBA,EAAa,GAAW,eACrB,eACT,EAEA,OAAKtB,EAgBDK,EAEAkB,OAACC,GAAK,UAAAzB,EACJ,SAAA,CAAAwB,OAACE,EAAA,CACC,SAAA,CAAAC,EAAAA,IAACC,GAAU,SAAA,eAAA,CAAa,EACxBD,EAAAA,IAACE,GAAgB,SAAA,uBAAA,CAAqB,CAAA,EACxC,EACAF,EAAAA,IAACG,EAAA,CACC,SAAAH,EAAAA,IAAC,MAAA,CAAI,UAAU,wCACb,SAAAA,EAAAA,IAAC,MAAA,CAAI,UAAU,sEAAA,CAAuE,CAAA,CACxF,CAAA,CACF,CAAA,EACF,EAIAnB,EAEAgB,OAACC,GAAK,UAAAzB,EACJ,SAAA,CAAA2B,MAACD,EAAA,CACC,SAAAC,EAAAA,IAACC,EAAA,CAAU,SAAA,eAAA,CAAa,EAC1B,EACAD,MAACG,EAAA,CACC,SAAAN,EAAAA,KAACO,EAAA,CAAM,QAAQ,cACb,SAAA,CAAAJ,EAAAA,IAACK,EAAA,CAAc,UAAU,SAAA,CAAU,EACnCL,EAAAA,IAACM,GAAW,SAAA,OAAA,CAAK,EACjBN,EAAAA,IAACO,GAAkB,SAAA1B,CAAA,CAAM,CAAA,CAAA,CAC3B,CAAA,CACF,CAAA,EACF,EAIAT,EAEAyB,OAACC,GAAK,UAAAzB,EACJ,SAAA,CAAA2B,EAAAA,IAACD,GAAW,UAAU,OACpB,SAAAF,EAAAA,KAACI,EAAA,CAAU,UAAU,4BACnB,SAAA,CAAAD,EAAAA,IAACQ,EAAA,CAAS,UAAU,8BAAA,CAA+B,EAAE,gBAAA,CAAA,CAEvD,CAAA,CACF,EACAR,MAACG,EAAA,CACC,SAAAN,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAG,EAAAA,IAACS,EAAA,CACC,MAAOf,EAAA,EACP,UAAU,MACV,mBAAoBC,EAAA,CAAiB,CAAA,EAEvCE,EAAAA,KAAC,MAAA,CAAI,UAAU,oEACb,SAAA,CAAAA,OAAC,OAAA,CAAM,SAAA,CAAArB,GAAA,YAAAA,EAAW,YAAY,iBAAiB,OAAA,EAAK,SACnD,OAAA,CAAM,SAAA,CAAAkB,EAAA,EAAqB,QAAQ,CAAC,EAAE,GAAA,CAAA,CAAC,CAAA,CAAA,CAC1C,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAKFG,OAACC,GAAK,UAAAzB,EACJ,SAAA,CAAAwB,OAACE,EAAA,CACC,SAAA,CAAAF,EAAAA,KAACI,EAAA,CAAU,UAAU,oBACnB,SAAA,CAAAD,EAAAA,IAACQ,EAAA,CAAS,UAAU,8BAAA,CAA+B,EAAE,eAAA,EAEvD,EACAR,EAAAA,IAACE,GAAgB,SAAA,oDAAA,CAEjB,CAAA,EACF,EACAF,MAACG,EAAA,CACC,SAAAN,EAAAA,KAAC,MAAA,CAAI,UAAU,YAEb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,YACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAG,EAAAA,IAAC,OAAA,CAAK,UAAU,sBAAsB,SAAA,cAAW,EACjDH,EAAAA,KAAC,OAAA,CAAK,UAAU,+CACb,SAAA,CAAArB,GAAA,YAAAA,EAAW,YAAY,iBAAiB,MAAIA,GAAA,YAAAA,EAAW,aAAa,gBAAe,CAAA,CACtF,CAAA,EACF,EACAwB,EAAAA,IAACS,EAAA,CACC,MAAOf,EAAA,EACP,UAAU,MACV,mBAAoBC,EAAA,CAAiB,CAAA,QAEtC,MAAA,CAAI,UAAU,mBACb,SAAAE,EAAAA,KAAC,OAAA,CAAK,UAAU,+CACb,SAAA,CAAAH,EAAA,EAAqB,QAAQ,CAAC,EAAE,QAAA,CAAA,CACnC,CAAA,CACF,CAAA,EACF,SAGC,MAAA,CACC,SAAA,CAAAM,EAAAA,IAAC,KAAA,CAAG,UAAU,2BAA2B,SAAA,mBAAgB,EACzDA,MAAC,OAAI,UAAU,cACZ,gBAAO,SAAQxB,GAAA,YAAAA,EAAW,iBAAkB,CAAA,CAAE,EAAE,IAAI,CAAC,CAACkC,EAASC,CAAM,IACpEd,OAAC,MAAA,CAAkB,UAAU,uBAC3B,SAAA,CAAAG,EAAAA,IAAC,QAAK,UAAU,qBACb,WAAQ,QAAQ,IAAK,GAAG,EAC3B,EACAH,EAAAA,KAAC,OAAA,CAAK,UAAU,+CACb,SAAA,CAAAc,EAAO,eAAA,EAAiB,SAAA,CAAA,CAC3B,CAAA,CAAA,EANQD,CAOV,CACD,CAAA,CACH,CAAA,EACF,EAGAb,EAAAA,KAAC,MAAA,CAAI,UAAU,8BACb,SAAA,CAAAA,EAAAA,KAAC,MAAA,CAAI,UAAU,iDACb,SAAA,CAAAG,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAA+C,SAAA,iBAAc,QAC3E,MAAA,CAAI,UAAU,wBAAyB,UAAAxB,GAAA,YAAAA,EAAW,eAAgB,CAAA,CAAE,CAAA,EACvE,EACAqB,EAAAA,KAAC,MAAA,CAAI,UAAU,iDACb,SAAA,CAAAG,EAAAA,IAAC,MAAA,CAAI,UAAU,+CAA+C,SAAA,YAAS,EACvEA,EAAAA,IAAC,MAAA,CAAI,UAAU,wBACZ,2BAAW,YAAa,QACvB,IAAI,MAAKxB,GAAA,YAAAA,EAAW,WAAY,EAAE,EAAE,mBAAA,EACpC,OAAA,CACJ,CAAA,CAAA,CACF,CAAA,EACF,EAGCkB,EAAA,EAAuB,IACtBG,EAAAA,KAACO,EAAA,CACC,SAAA,CAAAJ,EAAAA,IAACY,EAAA,CAAK,UAAU,SAAA,CAAU,EAC1BZ,EAAAA,IAACM,GAAW,SAAA,kBAAA,CAAgB,SAC3BC,EAAA,CAAiB,SAAA,CAAA,eACHb,EAAA,EAAqB,QAAQ,CAAC,EAAE,gFAAA,CAAA,CAE/C,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,EAxJEM,EAAAA,IAACF,EAAA,CAAK,UAAAzB,EACJ,SAAAwB,OAACE,EAAA,CACC,SAAA,CAAAF,EAAAA,KAACI,EAAA,CAAU,UAAU,oBACnB,SAAA,CAAAD,EAAAA,IAACQ,EAAA,CAAS,UAAU,8BAAA,CAA+B,EAAE,eAAA,EAEvD,EACAR,EAAAA,IAACE,GAAgB,SAAA,+CAAA,CAEjB,CAAA,CAAA,CACF,CAAA,CACF,CAgJN","x_google_ignoreList":[0]}