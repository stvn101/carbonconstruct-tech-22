import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { CalculationResult, MaterialInput, TransportInput, EnergyInput } from '@/lib/carbonCalculations';

export interface ProjectData {
  id: string;
  name: string;
  user_id: string;
  created_at: string;
  updated_at: string;
  materials: MaterialInput[];
  transport: TransportInput[];
  energy: EnergyInput[];
  result: CalculationResult;
  status: string;
  tags: string[];
  total_emissions: number;
  premium_only: boolean;
}

export async function exportProjectToPDF(project: ProjectData): Promise<void> {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  
  // Header
  pdf.setFontSize(24);
  pdf.setTextColor(0, 100, 0);
  pdf.text('CarbonConstruct', 20, 25);
  
  pdf.setFontSize(18);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Carbon Footprint Report', 20, 35);
  
  pdf.setFontSize(12);
  pdf.text(`Project: ${project.name}`, 20, 45);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 52);
  
  // Summary
  pdf.setFontSize(14);
  pdf.text('Executive Summary', 20, 65);
  
  const summaryData = [
    ['Total Emissions', `${(project.result.totalEmissions / 1000).toFixed(2)} t CO₂-e`],
    ['Material Emissions', `${(project.result.materialEmissions / 1000).toFixed(2)} t CO₂-e`],
    ['Transport Emissions', `${(project.result.transportEmissions / 1000).toFixed(2)} t CO₂-e`],
    ['Energy Emissions', `${(project.result.energyEmissions / 1000).toFixed(2)} t CO₂-e`],
    ['Scope 1 Emissions', `${(project.result.scope1 / 1000).toFixed(2)} t CO₂-e`],
    ['Scope 2 Emissions', `${(project.result.scope2 / 1000).toFixed(2)} t CO₂-e`],
    ['Scope 3 Emissions', `${(project.result.scope3 / 1000).toFixed(2)} t CO₂-e`]
  ];

  autoTable(pdf, {
    startY: 70,
    head: [['Category', 'Emissions']],
    body: summaryData,
    theme: 'grid',
    headStyles: { fillColor: [0, 100, 0] },
    margin: { left: 20, right: 20 }
  });

  // Materials breakdown
  if (project.materials.length > 0) {
    const finalY = (pdf as any).lastAutoTable.finalY + 15;
    pdf.setFontSize(14);
    pdf.text('Materials Breakdown', 20, finalY);
    
    const materialData = project.materials.map(material => [
      material.type,
      `${material.quantity} ${material.unit}`,
      `${((project.result.breakdownByMaterial[material.type] || 0) / 1000).toFixed(2)} t CO₂-e`
    ]);

    autoTable(pdf, {
      startY: finalY + 5,
      head: [['Material', 'Quantity', 'Emissions']],
      body: materialData,
      theme: 'striped',
      headStyles: { fillColor: [0, 100, 0] },
      margin: { left: 20, right: 20 }
    });
  }

  // Transport breakdown
  if (project.transport.length > 0) {
    const finalY = (pdf as any).lastAutoTable.finalY + 15;
    pdf.setFontSize(14);
    pdf.text('Transport Breakdown', 20, finalY);
    
    const transportData = project.transport.map(item => [
      item.type,
      `${item.distance} ${item.unit}`,
      `${((project.result.breakdownByTransport[item.type] || 0) / 1000).toFixed(2)} t CO₂-e`
    ]);

    autoTable(pdf, {
      startY: finalY + 5,
      head: [['Transport Type', 'Distance', 'Emissions']],
      body: transportData,
      theme: 'striped',
      headStyles: { fillColor: [0, 100, 0] },
      margin: { left: 20, right: 20 }
    });
  }

  // Energy breakdown
  if (project.energy.length > 0) {
    const finalY = (pdf as any).lastAutoTable.finalY + 15;
    pdf.setFontSize(14);
    pdf.text('Energy Breakdown', 20, finalY);
    
    const energyData = project.energy.map(item => [
      item.type,
      `${item.amount} ${item.unit}`,
      `${((project.result.breakdownByEnergy[item.type] || 0) / 1000).toFixed(2)} t CO₂-e`
    ]);

    autoTable(pdf, {
      startY: finalY + 5,
      head: [['Energy Type', 'Amount', 'Emissions']],
      body: energyData,
      theme: 'striped',
      headStyles: { fillColor: [0, 100, 0] },
      margin: { left: 20, right: 20 }
    });
  }

  // Footer
  const pageCount = pdf.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    pdf.text('Generated by CarbonConstruct', pageWidth - 60, pdf.internal.pageSize.getHeight() - 10);
  }

  pdf.save(`${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_report.pdf`);
}

export function exportToCSV(project: ProjectData): void {
  const headers = ['Category', 'Type', 'Quantity', 'Unit', 'Emissions (kg CO₂-e)'];
  const rows: string[][] = [headers];

  // Add materials
  project.materials.forEach(material => {
    rows.push([
      'Material',
      material.type,
      material.quantity.toString(),
      material.unit,
      (project.result.breakdownByMaterial[material.type] || 0).toFixed(2)
    ]);
  });

  // Add transport
  project.transport.forEach(item => {
    rows.push([
      'Transport',
      item.type,
      item.distance.toString(),
      item.unit,
      (project.result.breakdownByTransport[item.type] || 0).toFixed(2)
    ]);
  });

  // Add energy
  project.energy.forEach(item => {
    rows.push([
      'Energy',
      item.type,
      item.amount.toString(),
      item.unit,
      (project.result.breakdownByEnergy[item.type] || 0).toFixed(2)
    ]);
  });

  // Add summary
  rows.push([]);
  rows.push(['Summary', '', '', '', '']);
  rows.push(['Total Emissions', '', '', 'kg CO₂-e', project.result.totalEmissions.toFixed(2)]);
  rows.push(['Material Emissions', '', '', 'kg CO₂-e', project.result.materialEmissions.toFixed(2)]);
  rows.push(['Transport Emissions', '', '', 'kg CO₂-e', project.result.transportEmissions.toFixed(2)]);
  rows.push(['Energy Emissions', '', '', 'kg CO₂-e', project.result.energyEmissions.toFixed(2)]);

  const csvContent = rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_data.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function exportToJSON(project: ProjectData): void {
  const exportData = {
    project: {
      name: project.name,
      created_at: project.created_at,
      tags: project.tags
    },
    materials: project.materials,
    transport: project.transport,
    energy: project.energy,
    results: project.result,
    metadata: {
      export_date: new Date().toISOString(),
      format_version: '1.0',
      application: 'CarbonConstruct'
    }
  };

  const jsonString = JSON.stringify(exportData, null, 2);
  const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_project.json`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}