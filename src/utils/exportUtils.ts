import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { CalculationResult, MaterialInput, TransportInput, EnergyInput } from '@/lib/carbonCalculations';

export interface ProjectData {
  id: string;
  name: string;
  user_id: string;
  created_at: string;
  updated_at: string;
  materials: MaterialInput[];
  transport: TransportInput[];
  energy: EnergyInput[];
  result?: CalculationResult; // Make optional for compatibility
  status: string;
  tags: string[];
  total_emissions: number;
  premium_only: boolean;
}

export async function exportProjectToPDF(project: ProjectData): Promise<void> {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // CarbonConstruct Branded Header
  pdf.setFillColor(0, 100, 0);
  pdf.rect(0, 0, pageWidth, 25, 'F');
  
  pdf.setFontSize(20);
  pdf.setTextColor(255, 255, 255);
  pdf.text('CarbonConstruct', 20, 15);
  
  pdf.setFontSize(12);
  pdf.text('Professional Carbon Assessment Report', pageWidth - 20, 15, { align: 'right' });
  
  // Reset colors
  pdf.setTextColor(0, 0, 0);
  
  // Project Header
  pdf.setFontSize(18);
  pdf.text('Carbon Footprint Assessment', 20, 40);
  
  pdf.setFontSize(12);
  pdf.text(`Project: ${project.name}`, 20, 50);
  pdf.text(`Assessment Date: ${new Date().toLocaleDateString()}`, 20, 57);
  pdf.text(`Report Generated: ${new Date().toLocaleString()}`, 20, 64);
  
  // Only show summary if result exists
  if (!project.result) {
    pdf.setFontSize(14);
    pdf.text('No calculation results available', 20, 80);
    
    // Footer
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    pdf.text('Generated by CarbonConstruct | Professional Carbon Intelligence Platform', 20, pageHeight - 10);
    
    pdf.save(`${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_report.pdf`);
    return;
  }
  
  // Calculate compliance score
  const complianceScore = Math.min(100, Math.max(0, 
    100 - (project.result.totalEmissions / 10000) * 100
  ));
  
  // Executive Summary Box
  pdf.setFillColor(245, 245, 245);
  pdf.rect(20, 75, pageWidth - 40, 35, 'F');
  pdf.setDrawColor(200, 200, 200);
  pdf.rect(20, 75, pageWidth - 40, 35, 'S');
  
  pdf.setFontSize(14);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Executive Summary', 25, 85);
  
  pdf.setFontSize(11);
  pdf.text(`Total Carbon Footprint: ${(project.result.totalEmissions / 1000).toFixed(2)} t CO₂-e`, 25, 95);
  pdf.text(`Compliance Score: ${complianceScore.toFixed(0)}% (Green Star & NCC 2025)`, 25, 102);
  
  // Summary Table
  const summaryData = [
    ['Category', 'Emissions (t CO₂-e)', 'Percentage', 'Scope Assignment'],
    ['Materials', `${(project.result.materialEmissions / 1000).toFixed(2)}`, 
     `${((project.result.materialEmissions / project.result.totalEmissions) * 100).toFixed(1)}%`, 'Scope 3'],
    ['Transport', `${(project.result.transportEmissions / 1000).toFixed(2)}`, 
     `${((project.result.transportEmissions / project.result.totalEmissions) * 100).toFixed(1)}%`, 'Scope 1 & 3'],
    ['Energy', `${(project.result.energyEmissions / 1000).toFixed(2)}`, 
     `${((project.result.energyEmissions / project.result.totalEmissions) * 100).toFixed(1)}%`, 'Scope 2'],
    ['Scope 1 (Direct)', `${((project.result.scope1 || 0) / 1000).toFixed(2)}`, 
     `${(((project.result.scope1 || 0) / project.result.totalEmissions) * 100).toFixed(1)}%`, 'Combustion'],
    ['Scope 2 (Electricity)', `${((project.result.scope2 || 0) / 1000).toFixed(2)}`, 
     `${(((project.result.scope2 || 0) / project.result.totalEmissions) * 100).toFixed(1)}%`, 'Grid Energy'],
    ['Scope 3 (Indirect)', `${((project.result.scope3 || 0) / 1000).toFixed(2)}`, 
     `${(((project.result.scope3 || 0) / project.result.totalEmissions) * 100).toFixed(1)}%`, 'Supply Chain']
  ];

  autoTable(pdf, {
    startY: 120,
    head: [summaryData[0]],
    body: summaryData.slice(1),
    theme: 'striped',
    headStyles: { 
      fillColor: [0, 100, 0],
      textColor: [255, 255, 255],
      fontSize: 10,
      fontStyle: 'bold'
    },
    bodyStyles: { fontSize: 9 },
    columnStyles: {
      0: { cellWidth: 45 },
      1: { cellWidth: 35, halign: 'right' },
      2: { cellWidth: 25, halign: 'center' },
      3: { cellWidth: 35, halign: 'center' }
    },
    margin: { left: 20, right: 20 }
  });

  let currentY = (pdf as any).lastAutoTable.finalY + 15;

  
  // Compliance Assessment Section
  if (currentY > pageHeight - 60) {
    pdf.addPage();
    currentY = 20;
  }
  
  pdf.setFontSize(14);
  pdf.text('Compliance Assessment', 20, currentY);
  currentY += 10;
  
  // Compliance score box
  pdf.setFillColor(complianceScore >= 70 ? 220 : 255, complianceScore >= 70 ? 255 : 220, 220);
  pdf.rect(20, currentY, pageWidth - 40, 25, 'F');
  pdf.setDrawColor(complianceScore >= 70 ? 0 : 255, complianceScore >= 70 ? 150 : 100, 0);
  pdf.rect(20, currentY, pageWidth - 40, 25, 'S');
  
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Sustainability Score: ${complianceScore.toFixed(0)}%`, 25, currentY + 8);
  pdf.text('Green Star Compatible | NCC 2025 Ready | NABERS Aligned', 25, currentY + 16);
  
  currentY += 35;

  // Materials breakdown
  if (project.materials.length > 0) {
    if (currentY > pageHeight - 60) {
      pdf.addPage();
      currentY = 20;
    }
    
    pdf.setFontSize(14);
    pdf.text('Materials Analysis', 20, currentY);
    currentY += 5;
    
    const materialData = project.materials.map(material => [
      material.type,
      `${material.quantity} ${material.unit}`,
      `${((project.result!.breakdownByMaterial[material.type] || 0) / 1000).toFixed(2)} t CO₂-e`,
      `${(((project.result!.breakdownByMaterial[material.type] || 0) / project.result!.totalEmissions) * 100).toFixed(1)}%`
    ]);

    autoTable(pdf, {
      startY: currentY + 5,
      head: [['Material Type', 'Quantity', 'Emissions', 'Share']],
      body: materialData,
      theme: 'striped',
      headStyles: { fillColor: [0, 100, 0], fontSize: 10 },
      bodyStyles: { fontSize: 9 },
      columnStyles: {
        2: { halign: 'right' },
        3: { halign: 'center' }
      },
      margin: { left: 20, right: 20 }
    });
    
    currentY = (pdf as any).lastAutoTable.finalY + 15;
  }

  // Transport breakdown
  if (project.transport.length > 0) {
    if (currentY > pageHeight - 60) {
      pdf.addPage();
      currentY = 20;
    }
    
    pdf.setFontSize(14);
    pdf.text('Transport Analysis', 20, currentY);
    currentY += 5;
    
    const transportData = project.transport.map(item => [
      item.type,
      `${item.distance} ${item.unit}`,
      `${((project.result!.breakdownByTransport[item.type] || 0) / 1000).toFixed(2)} t CO₂-e`,
      `${(((project.result!.breakdownByTransport[item.type] || 0) / project.result!.totalEmissions) * 100).toFixed(1)}%`
    ]);

    autoTable(pdf, {
      startY: currentY + 5,
      head: [['Transport Mode', 'Distance', 'Emissions', 'Share']],
      body: transportData,
      theme: 'striped',
      headStyles: { fillColor: [0, 100, 0], fontSize: 10 },
      bodyStyles: { fontSize: 9 },
      columnStyles: {
        2: { halign: 'right' },
        3: { halign: 'center' }
      },
      margin: { left: 20, right: 20 }
    });
    
    currentY = (pdf as any).lastAutoTable.finalY + 15;
  }

  // Energy breakdown
  if (project.energy.length > 0) {
    if (currentY > pageHeight - 60) {
      pdf.addPage();
      currentY = 20;
    }
    
    pdf.setFontSize(14);
    pdf.text('Energy Analysis', 20, currentY);
    currentY += 5;
    
    const energyData = project.energy.map(item => [
      item.type,
      `${item.amount} ${item.unit}`,
      `${((project.result!.breakdownByEnergy[item.type] || 0) / 1000).toFixed(2)} t CO₂-e`,
      `${(((project.result!.breakdownByEnergy[item.type] || 0) / project.result!.totalEmissions) * 100).toFixed(1)}%`
    ]);

    autoTable(pdf, {
      startY: currentY + 5,
      head: [['Energy Source', 'Consumption', 'Emissions', 'Share']],
      body: energyData,
      theme: 'striped',
      headStyles: { fillColor: [0, 100, 0], fontSize: 10 },
      bodyStyles: { fontSize: 9 },
      columnStyles: {
        2: { halign: 'right' },
        3: { halign: 'center' }
      },
      margin: { left: 20, right: 20 }
    });
  }

  
  // Professional Footer on all pages
  const pageCount = pdf.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    
    // Footer background
    pdf.setFillColor(0, 100, 0);
    pdf.rect(0, pageHeight - 15, pageWidth, 15, 'F');
    
    pdf.setFontSize(9);
    pdf.setTextColor(255, 255, 255);
    pdf.text('CarbonConstruct | Professional Carbon Intelligence Platform', 20, pageHeight - 6);
    pdf.text(`Page ${i} of ${pageCount} | ${new Date().toLocaleDateString()}`, pageWidth - 20, pageHeight - 6, { align: 'right' });
    
    // Add certification mark
    pdf.text('ISO 14064 | GHG Protocol Compliant', pageWidth / 2, pageHeight - 6, { align: 'center' });
  }

  pdf.save(`${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_assessment_report.pdf`);
}

export function exportProjectToCSV(project: ProjectData): void {
  exportToCSV(project);
}

export function exportToCSV(project: ProjectData): void {
  if (!project.result) {
    console.warn('No calculation results to export');
    return;
  }
  const headers = ['Category', 'Type', 'Quantity', 'Unit', 'Emissions (kg CO₂-e)'];
  const rows: string[][] = [headers];

  // Add materials
  project.materials.forEach(material => {
    rows.push([
      'Material',
      material.type,
      material.quantity.toString(),
      material.unit,
      (project.result.breakdownByMaterial[material.type] || 0).toFixed(2)
    ]);
  });

  // Add transport
  project.transport.forEach(item => {
    rows.push([
      'Transport',
      item.type,
      item.distance.toString(),
      item.unit,
      (project.result.breakdownByTransport[item.type] || 0).toFixed(2)
    ]);
  });

  // Add energy
  project.energy.forEach(item => {
    rows.push([
      'Energy',
      item.type,
      item.amount.toString(),
      item.unit,
      (project.result.breakdownByEnergy[item.type] || 0).toFixed(2)
    ]);
  });

  // Add summary
  rows.push([]);
  rows.push(['Summary', '', '', '', '']);
  rows.push(['Total Emissions', '', '', 'kg CO₂-e', project.result.totalEmissions.toFixed(2)]);
  rows.push(['Material Emissions', '', '', 'kg CO₂-e', project.result.materialEmissions.toFixed(2)]);
  rows.push(['Transport Emissions', '', '', 'kg CO₂-e', project.result.transportEmissions.toFixed(2)]);
  rows.push(['Energy Emissions', '', '', 'kg CO₂-e', project.result.energyEmissions.toFixed(2)]);

  const csvContent = rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_data.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function exportToJSON(project: ProjectData): void {
  const exportData = {
    project: {
      name: project.name,
      created_at: project.created_at,
      tags: project.tags
    },
    materials: project.materials,
    transport: project.transport,
    energy: project.energy,
    results: project.result,
    metadata: {
      export_date: new Date().toISOString(),
      format_version: '1.0',
      application: 'CarbonConstruct'
    }
  };

  const jsonString = JSON.stringify(exportData, null, 2);
  const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_carbon_project.json`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}