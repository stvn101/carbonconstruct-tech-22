import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { EPDRecord, EPDStage } from '@/types/epd';

export class EPDExportService {
  // Generate PDF export
  static async generateEpdPdf(epdData: EPDRecord): Promise<void> {
    const doc = new jsPDF();
    let yPosition = 20;

    // Helper function to add text with automatic page breaks
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
      if (yPosition > 280) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFontSize(fontSize);
      if (isBold) {
        doc.setFont(undefined, 'bold');
      } else {
        doc.setFont(undefined, 'normal');
      }
      
      doc.text(text, 20, yPosition);
      yPosition += fontSize * 0.5 + 2;
    };

    // Title
    addText('Environmental Product Declaration', 20, true);
    addText('In accordance with ISO 14025, EN 15804, and ISO 21930', 10);
    yPosition += 10;

    // Product Information
    addText('PRODUCT INFORMATION', 16, true);
    addText(`Product Name: ${epdData.product_name}`, 12);
    addText(`Manufacturer: ${epdData.manufacturer_name}`, 12);
    addText(`Functional Unit: ${epdData.functional_unit}`, 12);
    addText(`Version: v${epdData.version_number}`, 12);
    addText(`Status: ${epdData.status}`, 12);
    addText(`Verification: ${epdData.verification_status}`, 12);
    
    if (epdData.product_description) {
      addText(`Description: ${epdData.product_description}`, 12);
    }
    yPosition += 10;

    // Environmental Impact Summary
    addText('ENVIRONMENTAL IMPACT SUMMARY', 16, true);
    addText(`Total CO₂e: ${epdData.total_co2e?.toFixed(3) || 'N/A'} kg per ${epdData.functional_unit}`, 12);
    addText(`GWP Fossil: ${epdData.gwp_fossil?.toFixed(3) || 'N/A'} kg CO₂e`, 12);
    addText(`GWP Biogenic: ${epdData.gwp_biogenic?.toFixed(3) || 'N/A'} kg CO₂e`, 12);
    addText(`GWP Total: ${epdData.gwp_total?.toFixed(3) || 'N/A'} kg CO₂e`, 12);
    yPosition += 10;

    // Lifecycle Stages Table
    addText('LIFECYCLE STAGE EMISSIONS', 16, true);
    
    // Prepare table data
    const tableData: string[][] = [];
    const stageDescriptions: Record<EPDStage, string> = {
      A1: 'Raw material supply',
      A2: 'Transport to manufacturer', 
      A3: 'Manufacturing',
      A4: 'Transport to construction site',
      A5: 'Installation process',
      B1: 'Use',
      B2: 'Maintenance',
      B3: 'Repair',
      B4: 'Replacement',
      B5: 'Refurbishment',
      B6: 'Operational energy use',
      B7: 'Operational water use',
      C1: 'Deconstruction/demolition',
      C2: 'Transport to waste processing',
      C3: 'Waste processing',
      C4: 'Final disposal',
      D: 'Benefits beyond system boundary'
    };

    // Add stage data to table
    Object.entries(epdData.epd_stage_data).forEach(([stage, stageData]) => {
      if (stageData && typeof stageData === 'object' && 'co2e_value' in stageData) {
        tableData.push([
          stage,
          stageDescriptions[stage as EPDStage] || stage,
          (stageData.co2e_value as number).toFixed(3),
          'kg CO₂e'
        ]);
      }
    });

    // Add the table
    (doc as any).autoTable({
      startY: yPosition,
      head: [['Stage', 'Description', 'Emissions', 'Unit']],
      body: tableData,
      styles: { fontSize: 10, cellPadding: 3 },
      headStyles: { fillColor: [74, 144, 226] },
      alternateRowStyles: { fillColor: [245, 245, 245] }
    });

    yPosition = (doc as any).lastAutoTable.finalY + 20;

    // Data Sources
    addText('DATA SOURCES & METHODOLOGY', 16, true);
    if (Array.isArray(epdData.data_sources)) {
      epdData.data_sources.forEach((source: string) => {
        addText(`• ${source}`, 10);
      });
    }
    yPosition += 10;

    // Compliance Notice
    addText('VERIFICATION & COMPLIANCE NOTICE', 16, true);
    addText('This EPD has been automatically generated by the CarbonConstruct platform.', 10);
    addText(`Current status: ${epdData.verification_status}`, 10);
    addText('For official compliance purposes, third-party verification may be required.', 10);
    yPosition += 10;

    // Footer
    addText(`Generated: ${new Date(epdData.created_at).toLocaleString()}`, 8);
    addText('Platform: CarbonConstruct EPD Generator', 8);
    addText('Standards: ISO 14025, EN 15804, ISO 21930', 8);

    // Save the PDF
    doc.save(`EPD_${epdData.product_name.replace(/[^a-zA-Z0-9]/g, '_')}_v${epdData.version_number}.pdf`);
  }

  // Generate CSV export
  static generateEpdCsv(epdData: EPDRecord): void {
    const csvRows: string[] = [];
    
    // Headers
    csvRows.push('Category,Field,Value');
    
    // Product Information
    csvRows.push(`Product Information,Product Name,${epdData.product_name}`);
    csvRows.push(`Product Information,Manufacturer,${epdData.manufacturer_name}`);
    csvRows.push(`Product Information,Functional Unit,${epdData.functional_unit}`);
    csvRows.push(`Product Information,Version,v${epdData.version_number}`);
    csvRows.push(`Product Information,Status,${epdData.status}`);
    csvRows.push(`Product Information,Description,"${epdData.product_description || 'N/A'}"`);
    
    // Environmental Impact
    csvRows.push(`Environmental Impact,Total CO2e (kg),${epdData.total_co2e?.toFixed(3) || 'N/A'}`);
    csvRows.push(`Environmental Impact,GWP Fossil (kg),${epdData.gwp_fossil?.toFixed(3) || 'N/A'}`);
    csvRows.push(`Environmental Impact,GWP Biogenic (kg),${epdData.gwp_biogenic?.toFixed(3) || 'N/A'}`);
    csvRows.push(`Environmental Impact,GWP Total (kg),${epdData.gwp_total?.toFixed(3) || 'N/A'}`);
    
    // Lifecycle Stages
    Object.entries(epdData.epd_stage_data).forEach(([stage, stageData]) => {
      if (stageData && typeof stageData === 'object' && 'co2e_value' in stageData) {
        csvRows.push(`Lifecycle Stage,${stage},(${stageData.co2e_value as number}.toFixed(3)} kg CO2e)`);
      }
    });
    
    // Metadata
    csvRows.push(`Metadata,Created At,${epdData.created_at}`);
    csvRows.push(`Metadata,Verification Status,${epdData.verification_status}`);
    csvRows.push(`Metadata,ISO Compliant,${epdData.iso_compliant ? 'Yes' : 'No'}`);
    
    // Create and download CSV
    const csvContent = csvRows.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `EPD_${epdData.product_name.replace(/[^a-zA-Z0-9]/g, '_')}_v${epdData.version_number}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }

  // Generate JSON export
  static generateEpdJson(epdData: EPDRecord): void {
    // Create a clean export object
    const exportData = {
      epd_info: {
        id: epdData.id,
        product_name: epdData.product_name,
        manufacturer_name: epdData.manufacturer_name,
        functional_unit: epdData.functional_unit,
        version_number: epdData.version_number,
        status: epdData.status,
        verification_status: epdData.verification_status,
        iso_compliant: epdData.iso_compliant
      },
      environmental_impact: {
        total_co2e: epdData.total_co2e,
        gwp_fossil: epdData.gwp_fossil,
        gwp_biogenic: epdData.gwp_biogenic,
        gwp_total: epdData.gwp_total
      },
      lifecycle_stages: epdData.epd_stage_data,
      metadata: {
        created_at: epdData.created_at,
        updated_at: epdData.updated_at,
        data_sources: epdData.data_sources,
        export_timestamp: new Date().toISOString(),
        export_source: 'CarbonConstruct EPD Generator'
      },
      compliance: {
        standards: ['ISO 14025', 'EN 15804', 'ISO 21930'],
        declaration_type: 'Type III Environmental Declaration',
        verification_note: 'This EPD was automatically generated and may require third-party verification for official compliance.'
      }
    };

    // Create and download JSON
    const jsonContent = JSON.stringify(exportData, null, 2);
    const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `EPD_${epdData.product_name.replace(/[^a-zA-Z0-9]/g, '_')}_v${epdData.version_number}.json`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }
}