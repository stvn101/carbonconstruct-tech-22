name: Quality Gates
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Run accessibility tests
        run: npm run test:a11y
        
      - name: Build application
        run: npm run build
        
      - name: Bundle analysis
        run: npm run analyze
        
      - name: Security audit
        run: npm audit --audit-level moderate
        
      - name: Lighthouse CI
        run: npm run lighthouse:ci
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          
      - name: Quality Gate Check
        run: npm run quality:gate
        
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('./quality-gate-results.json', 'utf8');
            const data = JSON.parse(results);
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Quality Gate Results
              
              **Status**: ${data.passed ? '✅ PASSED' : '❌ FAILED'}
              
              ### Coverage
              - Statements: ${data.coverage.statements}%
              - Branches: ${data.coverage.branches}%
              - Functions: ${data.coverage.functions}%
              - Lines: ${data.coverage.lines}%
              
              ### Performance
              - Lighthouse Score: ${data.lighthouse.performance}/100
              
              ### Accessibility
              - WCAG Compliance: ${data.accessibility.violations === 0 ? '✅' : '❌'} ${data.accessibility.violations} violations
              
              ${data.failures.length > 0 ? `### Failures\n${data.failures.map(f => `- ${f}`).join('\n')}` : ''}
              ${data.warnings.length > 0 ? `### Warnings\n${data.warnings.map(w => `- ${w}`).join('\n')}` : ''}
              `
            });